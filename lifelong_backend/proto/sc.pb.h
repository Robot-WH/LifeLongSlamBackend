// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sc_2eproto;
namespace lifelong_backend {
namespace scan_context {
namespace proto {
class scan_context;
class scan_contextDefaultTypeInternal;
extern scan_contextDefaultTypeInternal _scan_context_default_instance_;
}  // namespace proto
}  // namespace scan_context
}  // namespace lifelong_backend
PROTOBUF_NAMESPACE_OPEN
template<> ::lifelong_backend::scan_context::proto::scan_context* Arena::CreateMaybeMessage<::lifelong_backend::scan_context::proto::scan_context>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lifelong_backend {
namespace scan_context {
namespace proto {

// ===================================================================

class scan_context PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.scan_context.proto.scan_context) */ {
 public:
  inline scan_context() : scan_context(nullptr) {};
  virtual ~scan_context();

  scan_context(const scan_context& from);
  scan_context(scan_context&& from) noexcept
    : scan_context() {
    *this = ::std::move(from);
  }

  inline scan_context& operator=(const scan_context& from) {
    CopyFrom(from);
    return *this;
  }
  inline scan_context& operator=(scan_context&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scan_context& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scan_context* internal_default_instance() {
    return reinterpret_cast<const scan_context*>(
               &_scan_context_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(scan_context& a, scan_context& b) {
    a.Swap(&b);
  }
  inline void Swap(scan_context* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scan_context* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scan_context* New() const final {
    return CreateMaybeMessage<scan_context>(nullptr);
  }

  scan_context* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scan_context>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scan_context& from);
  void MergeFrom(const scan_context& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scan_context* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.scan_context.proto.scan_context";
  }
  protected:
  explicit scan_context(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sc_2eproto);
    return ::descriptor_table_sc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolarcontextFieldNumber = 1,
    kRingkeyFieldNumber = 2,
  };
  // repeated double polarcontext = 1;
  int polarcontext_size() const;
  private:
  int _internal_polarcontext_size() const;
  public:
  void clear_polarcontext();
  private:
  double _internal_polarcontext(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_polarcontext() const;
  void _internal_add_polarcontext(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_polarcontext();
  public:
  double polarcontext(int index) const;
  void set_polarcontext(int index, double value);
  void add_polarcontext(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      polarcontext() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_polarcontext();

  // repeated double ringkey = 2;
  int ringkey_size() const;
  private:
  int _internal_ringkey_size() const;
  public:
  void clear_ringkey();
  private:
  double _internal_ringkey(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_ringkey() const;
  void _internal_add_ringkey(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_ringkey();
  public:
  double ringkey(int index) const;
  void set_ringkey(int index, double value);
  void add_ringkey(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ringkey() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ringkey();

  // @@protoc_insertion_point(class_scope:lifelong_backend.scan_context.proto.scan_context)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > polarcontext_;
  mutable std::atomic<int> _polarcontext_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ringkey_;
  mutable std::atomic<int> _ringkey_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// scan_context

// repeated double polarcontext = 1;
inline int scan_context::_internal_polarcontext_size() const {
  return polarcontext_.size();
}
inline int scan_context::polarcontext_size() const {
  return _internal_polarcontext_size();
}
inline void scan_context::clear_polarcontext() {
  polarcontext_.Clear();
}
inline double scan_context::_internal_polarcontext(int index) const {
  return polarcontext_.Get(index);
}
inline double scan_context::polarcontext(int index) const {
  // @@protoc_insertion_point(field_get:lifelong_backend.scan_context.proto.scan_context.polarcontext)
  return _internal_polarcontext(index);
}
inline void scan_context::set_polarcontext(int index, double value) {
  polarcontext_.Set(index, value);
  // @@protoc_insertion_point(field_set:lifelong_backend.scan_context.proto.scan_context.polarcontext)
}
inline void scan_context::_internal_add_polarcontext(double value) {
  polarcontext_.Add(value);
}
inline void scan_context::add_polarcontext(double value) {
  _internal_add_polarcontext(value);
  // @@protoc_insertion_point(field_add:lifelong_backend.scan_context.proto.scan_context.polarcontext)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
scan_context::_internal_polarcontext() const {
  return polarcontext_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
scan_context::polarcontext() const {
  // @@protoc_insertion_point(field_list:lifelong_backend.scan_context.proto.scan_context.polarcontext)
  return _internal_polarcontext();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
scan_context::_internal_mutable_polarcontext() {
  return &polarcontext_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
scan_context::mutable_polarcontext() {
  // @@protoc_insertion_point(field_mutable_list:lifelong_backend.scan_context.proto.scan_context.polarcontext)
  return _internal_mutable_polarcontext();
}

// repeated double ringkey = 2;
inline int scan_context::_internal_ringkey_size() const {
  return ringkey_.size();
}
inline int scan_context::ringkey_size() const {
  return _internal_ringkey_size();
}
inline void scan_context::clear_ringkey() {
  ringkey_.Clear();
}
inline double scan_context::_internal_ringkey(int index) const {
  return ringkey_.Get(index);
}
inline double scan_context::ringkey(int index) const {
  // @@protoc_insertion_point(field_get:lifelong_backend.scan_context.proto.scan_context.ringkey)
  return _internal_ringkey(index);
}
inline void scan_context::set_ringkey(int index, double value) {
  ringkey_.Set(index, value);
  // @@protoc_insertion_point(field_set:lifelong_backend.scan_context.proto.scan_context.ringkey)
}
inline void scan_context::_internal_add_ringkey(double value) {
  ringkey_.Add(value);
}
inline void scan_context::add_ringkey(double value) {
  _internal_add_ringkey(value);
  // @@protoc_insertion_point(field_add:lifelong_backend.scan_context.proto.scan_context.ringkey)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
scan_context::_internal_ringkey() const {
  return ringkey_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
scan_context::ringkey() const {
  // @@protoc_insertion_point(field_list:lifelong_backend.scan_context.proto.scan_context.ringkey)
  return _internal_ringkey();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
scan_context::_internal_mutable_ringkey() {
  return &ringkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
scan_context::mutable_ringkey() {
  // @@protoc_insertion_point(field_mutable_list:lifelong_backend.scan_context.proto.scan_context.ringkey)
  return _internal_mutable_ringkey();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace scan_context
}  // namespace lifelong_backend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sc_2eproto
