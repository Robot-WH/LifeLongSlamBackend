// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sc.proto

#include "sc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace lifelong_backend {
namespace scan_context {
namespace proto {
class scan_contextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scan_context> _instance;
} _scan_context_default_instance_;
}  // namespace proto
}  // namespace scan_context
}  // namespace lifelong_backend
static void InitDefaultsscc_info_scan_context_sc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lifelong_backend::scan_context::proto::_scan_context_default_instance_;
    new (ptr) ::lifelong_backend::scan_context::proto::scan_context();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lifelong_backend::scan_context::proto::scan_context::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_scan_context_sc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_scan_context_sc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sc_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lifelong_backend::scan_context::proto::scan_context, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lifelong_backend::scan_context::proto::scan_context, polarcontext_),
  PROTOBUF_FIELD_OFFSET(::lifelong_backend::scan_context::proto::scan_context, ringkey_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lifelong_backend::scan_context::proto::scan_context)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lifelong_backend::scan_context::proto::_scan_context_default_instance_),
};

const char descriptor_table_protodef_sc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010sc.proto\022#lifelong_backend.scan_contex"
  "t.proto\"5\n\014scan_context\022\024\n\014polarcontext\030"
  "\001 \003(\001\022\017\n\007ringkey\030\002 \003(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sc_2eproto_sccs[1] = {
  &scc_info_scan_context_sc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sc_2eproto = {
  false, false, descriptor_table_protodef_sc_2eproto, "sc.proto", 110,
  &descriptor_table_sc_2eproto_once, descriptor_table_sc_2eproto_sccs, descriptor_table_sc_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_sc_2eproto::offsets,
  file_level_metadata_sc_2eproto, 1, file_level_enum_descriptors_sc_2eproto, file_level_service_descriptors_sc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sc_2eproto)), true);
namespace lifelong_backend {
namespace scan_context {
namespace proto {

// ===================================================================

void scan_context::InitAsDefaultInstance() {
}
class scan_context::_Internal {
 public:
};

scan_context::scan_context(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  polarcontext_(arena),
  ringkey_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lifelong_backend.scan_context.proto.scan_context)
}
scan_context::scan_context(const scan_context& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      polarcontext_(from.polarcontext_),
      ringkey_(from.ringkey_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.scan_context.proto.scan_context)
}

void scan_context::SharedCtor() {
}

scan_context::~scan_context() {
  // @@protoc_insertion_point(destructor:lifelong_backend.scan_context.proto.scan_context)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scan_context::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void scan_context::ArenaDtor(void* object) {
  scan_context* _this = reinterpret_cast< scan_context* >(object);
  (void)_this;
}
void scan_context::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scan_context::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scan_context& scan_context::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scan_context_sc_2eproto.base);
  return *internal_default_instance();
}


void scan_context::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.scan_context.proto.scan_context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polarcontext_.Clear();
  ringkey_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scan_context::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double polarcontext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_polarcontext(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_polarcontext(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double ringkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_ringkey(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_ringkey(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scan_context::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.scan_context.proto.scan_context)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double polarcontext = 1;
  if (this->_internal_polarcontext_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_polarcontext(), target);
  }

  // repeated double ringkey = 2;
  if (this->_internal_ringkey_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_ringkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.scan_context.proto.scan_context)
  return target;
}

size_t scan_context::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.scan_context.proto.scan_context)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double polarcontext = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_polarcontext_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _polarcontext_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double ringkey = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ringkey_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ringkey_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scan_context::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.scan_context.proto.scan_context)
  GOOGLE_DCHECK_NE(&from, this);
  const scan_context* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scan_context>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.scan_context.proto.scan_context)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.scan_context.proto.scan_context)
    MergeFrom(*source);
  }
}

void scan_context::MergeFrom(const scan_context& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.scan_context.proto.scan_context)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polarcontext_.MergeFrom(from.polarcontext_);
  ringkey_.MergeFrom(from.ringkey_);
}

void scan_context::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.scan_context.proto.scan_context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scan_context::CopyFrom(const scan_context& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.scan_context.proto.scan_context)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scan_context::IsInitialized() const {
  return true;
}

void scan_context::InternalSwap(scan_context* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  polarcontext_.InternalSwap(&other->polarcontext_);
  ringkey_.InternalSwap(&other->ringkey_);
}

::PROTOBUF_NAMESPACE_ID::Metadata scan_context::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace scan_context
}  // namespace lifelong_backend
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lifelong_backend::scan_context::proto::scan_context* Arena::CreateMaybeMessage< ::lifelong_backend::scan_context::proto::scan_context >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lifelong_backend::scan_context::proto::scan_context >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
