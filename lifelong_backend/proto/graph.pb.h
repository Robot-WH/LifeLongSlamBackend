// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "transform.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace lifelong_backend {
namespace graph {
namespace proto {
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class Vertex;
class VertexDefaultTypeInternal;
extern VertexDefaultTypeInternal _Vertex_default_instance_;
}  // namespace proto
}  // namespace graph
}  // namespace lifelong_backend
PROTOBUF_NAMESPACE_OPEN
template<> ::lifelong_backend::graph::proto::Edge* Arena::CreateMaybeMessage<::lifelong_backend::graph::proto::Edge>(Arena*);
template<> ::lifelong_backend::graph::proto::Vertex* Arena::CreateMaybeMessage<::lifelong_backend::graph::proto::Vertex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lifelong_backend {
namespace graph {
namespace proto {

// ===================================================================

class Vertex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.graph.proto.Vertex) */ {
 public:
  inline Vertex() : Vertex(nullptr) {};
  virtual ~Vertex();

  Vertex(const Vertex& from);
  Vertex(Vertex&& from) noexcept
    : Vertex() {
    *this = ::std::move(from);
  }

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vertex& operator=(Vertex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vertex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vertex* internal_default_instance() {
    return reinterpret_cast<const Vertex*>(
               &_Vertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vertex& a, Vertex& b) {
    a.Swap(&b);
  }
  inline void Swap(Vertex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vertex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vertex* New() const final {
    return CreateMaybeMessage<Vertex>(nullptr);
  }

  Vertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.graph.proto.Vertex";
  }
  protected:
  explicit Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 3,
    kTrajFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated double pose = 3;
  int pose_size() const;
  private:
  int _internal_pose_size() const;
  public:
  void clear_pose();
  private:
  double _internal_pose(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_pose() const;
  void _internal_add_pose(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_pose();
  public:
  double pose(int index) const;
  void set_pose(int index, double value);
  void add_pose(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      pose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_pose();

  // uint32 traj = 1;
  void clear_traj();
  ::PROTOBUF_NAMESPACE_ID::uint32 traj() const;
  void set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_traj() const;
  void _internal_set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.graph.proto.Vertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > pose_;
  mutable std::atomic<int> _pose_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 traj_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.graph.proto.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {};
  virtual ~Edge();

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.graph.proto.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_graph_2eproto);
    return ::descriptor_table_graph_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoiseFieldNumber = 6,
    kConstraintFieldNumber = 5,
    kTrajFieldNumber = 1,
    kIdFieldNumber = 2,
    kLinkHeadFieldNumber = 3,
    kLinkTailFieldNumber = 4,
  };
  // repeated double noise = 6;
  int noise_size() const;
  private:
  int _internal_noise_size() const;
  public:
  void clear_noise();
  private:
  double _internal_noise(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_noise() const;
  void _internal_add_noise(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_noise();
  public:
  double noise(int index) const;
  void set_noise(int index, double value);
  void add_noise(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      noise() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_noise();

  // .lifelong_backend.transform.proto.Transform3d constraint = 5;
  bool has_constraint() const;
  private:
  bool _internal_has_constraint() const;
  public:
  void clear_constraint();
  const ::lifelong_backend::transform::proto::Transform3d& constraint() const;
  ::lifelong_backend::transform::proto::Transform3d* release_constraint();
  ::lifelong_backend::transform::proto::Transform3d* mutable_constraint();
  void set_allocated_constraint(::lifelong_backend::transform::proto::Transform3d* constraint);
  private:
  const ::lifelong_backend::transform::proto::Transform3d& _internal_constraint() const;
  ::lifelong_backend::transform::proto::Transform3d* _internal_mutable_constraint();
  public:
  void unsafe_arena_set_allocated_constraint(
      ::lifelong_backend::transform::proto::Transform3d* constraint);
  ::lifelong_backend::transform::proto::Transform3d* unsafe_arena_release_constraint();

  // uint32 traj = 1;
  void clear_traj();
  ::PROTOBUF_NAMESPACE_ID::uint32 traj() const;
  void set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_traj() const;
  void _internal_set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 link_head = 3;
  void clear_link_head();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_head() const;
  void set_link_head(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_head() const;
  void _internal_set_link_head(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 link_tail = 4;
  void clear_link_tail();
  ::PROTOBUF_NAMESPACE_ID::uint32 link_tail() const;
  void set_link_tail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_link_tail() const;
  void _internal_set_link_tail(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.graph.proto.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > noise_;
  mutable std::atomic<int> _noise_cached_byte_size_;
  ::lifelong_backend::transform::proto::Transform3d* constraint_;
  ::PROTOBUF_NAMESPACE_ID::uint32 traj_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_head_;
  ::PROTOBUF_NAMESPACE_ID::uint32 link_tail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vertex

// uint32 traj = 1;
inline void Vertex::clear_traj() {
  traj_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vertex::_internal_traj() const {
  return traj_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vertex::traj() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.traj)
  return _internal_traj();
}
inline void Vertex::_internal_set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  traj_ = value;
}
inline void Vertex::set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_traj(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.traj)
}

// uint32 id = 2;
inline void Vertex::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vertex::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vertex::id() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.id)
  return _internal_id();
}
inline void Vertex::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Vertex::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.id)
}

// repeated double pose = 3;
inline int Vertex::_internal_pose_size() const {
  return pose_.size();
}
inline int Vertex::pose_size() const {
  return _internal_pose_size();
}
inline void Vertex::clear_pose() {
  pose_.Clear();
}
inline double Vertex::_internal_pose(int index) const {
  return pose_.Get(index);
}
inline double Vertex::pose(int index) const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.pose)
  return _internal_pose(index);
}
inline void Vertex::set_pose(int index, double value) {
  pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.pose)
}
inline void Vertex::_internal_add_pose(double value) {
  pose_.Add(value);
}
inline void Vertex::add_pose(double value) {
  _internal_add_pose(value);
  // @@protoc_insertion_point(field_add:lifelong_backend.graph.proto.Vertex.pose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vertex::_internal_pose() const {
  return pose_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Vertex::pose() const {
  // @@protoc_insertion_point(field_list:lifelong_backend.graph.proto.Vertex.pose)
  return _internal_pose();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vertex::_internal_mutable_pose() {
  return &pose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Vertex::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:lifelong_backend.graph.proto.Vertex.pose)
  return _internal_mutable_pose();
}

// -------------------------------------------------------------------

// Edge

// uint32 traj = 1;
inline void Edge::clear_traj() {
  traj_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_traj() const {
  return traj_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::traj() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.traj)
  return _internal_traj();
}
inline void Edge::_internal_set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  traj_ = value;
}
inline void Edge::set_traj(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_traj(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.traj)
}

// uint32 id = 2;
inline void Edge::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::id() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.id)
  return _internal_id();
}
inline void Edge::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Edge::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.id)
}

// uint32 link_head = 3;
inline void Edge::clear_link_head() {
  link_head_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_link_head() const {
  return link_head_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::link_head() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.link_head)
  return _internal_link_head();
}
inline void Edge::_internal_set_link_head(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_head_ = value;
}
inline void Edge::set_link_head(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_head(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.link_head)
}

// uint32 link_tail = 4;
inline void Edge::clear_link_tail() {
  link_tail_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_link_tail() const {
  return link_tail_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::link_tail() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.link_tail)
  return _internal_link_tail();
}
inline void Edge::_internal_set_link_tail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  link_tail_ = value;
}
inline void Edge::set_link_tail(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_link_tail(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.link_tail)
}

// .lifelong_backend.transform.proto.Transform3d constraint = 5;
inline bool Edge::_internal_has_constraint() const {
  return this != internal_default_instance() && constraint_ != nullptr;
}
inline bool Edge::has_constraint() const {
  return _internal_has_constraint();
}
inline const ::lifelong_backend::transform::proto::Transform3d& Edge::_internal_constraint() const {
  const ::lifelong_backend::transform::proto::Transform3d* p = constraint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lifelong_backend::transform::proto::Transform3d*>(
      &::lifelong_backend::transform::proto::_Transform3d_default_instance_);
}
inline const ::lifelong_backend::transform::proto::Transform3d& Edge::constraint() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.constraint)
  return _internal_constraint();
}
inline void Edge::unsafe_arena_set_allocated_constraint(
    ::lifelong_backend::transform::proto::Transform3d* constraint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_);
  }
  constraint_ = constraint;
  if (constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lifelong_backend.graph.proto.Edge.constraint)
}
inline ::lifelong_backend::transform::proto::Transform3d* Edge::release_constraint() {
  auto temp = unsafe_arena_release_constraint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lifelong_backend::transform::proto::Transform3d* Edge::unsafe_arena_release_constraint() {
  // @@protoc_insertion_point(field_release:lifelong_backend.graph.proto.Edge.constraint)
  
  ::lifelong_backend::transform::proto::Transform3d* temp = constraint_;
  constraint_ = nullptr;
  return temp;
}
inline ::lifelong_backend::transform::proto::Transform3d* Edge::_internal_mutable_constraint() {
  
  if (constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::lifelong_backend::transform::proto::Transform3d>(GetArena());
    constraint_ = p;
  }
  return constraint_;
}
inline ::lifelong_backend::transform::proto::Transform3d* Edge::mutable_constraint() {
  // @@protoc_insertion_point(field_mutable:lifelong_backend.graph.proto.Edge.constraint)
  return _internal_mutable_constraint();
}
inline void Edge::set_allocated_constraint(::lifelong_backend::transform::proto::Transform3d* constraint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint_);
  }
  if (constraint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(constraint)->GetArena();
    if (message_arena != submessage_arena) {
      constraint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constraint, submessage_arena);
    }
    
  } else {
    
  }
  constraint_ = constraint;
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.graph.proto.Edge.constraint)
}

// repeated double noise = 6;
inline int Edge::_internal_noise_size() const {
  return noise_.size();
}
inline int Edge::noise_size() const {
  return _internal_noise_size();
}
inline void Edge::clear_noise() {
  noise_.Clear();
}
inline double Edge::_internal_noise(int index) const {
  return noise_.Get(index);
}
inline double Edge::noise(int index) const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.noise)
  return _internal_noise(index);
}
inline void Edge::set_noise(int index, double value) {
  noise_.Set(index, value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.noise)
}
inline void Edge::_internal_add_noise(double value) {
  noise_.Add(value);
}
inline void Edge::add_noise(double value) {
  _internal_add_noise(value);
  // @@protoc_insertion_point(field_add:lifelong_backend.graph.proto.Edge.noise)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Edge::_internal_noise() const {
  return noise_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Edge::noise() const {
  // @@protoc_insertion_point(field_list:lifelong_backend.graph.proto.Edge.noise)
  return _internal_noise();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Edge::_internal_mutable_noise() {
  return &noise_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Edge::mutable_noise() {
  // @@protoc_insertion_point(field_mutable_list:lifelong_backend.graph.proto.Edge.noise)
  return _internal_mutable_noise();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace graph
}  // namespace lifelong_backend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
