// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#ifndef PROTOBUF_transform_2eproto__INCLUDED
#define PROTOBUF_transform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace lifelong_backend {
namespace transform {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_transform_2eproto();
void protobuf_InitDefaults_transform_2eproto();
void protobuf_AssignDesc_transform_2eproto();
void protobuf_ShutdownFile_transform_2eproto();

class Quaterniond;
class Quaternionf;
class Transform2d;
class Transform2f;
class Transform3d;
class Transform3f;
class Vector2d;
class Vector2f;
class Vector3d;
class Vector3f;
class Vector4f;

// ===================================================================

class Vector2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector2d) */ {
 public:
  Vector2d();
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2d& default_instance();

  static const Vector2d* internal_default_instance();

  void Swap(Vector2d* other);

  // implements Message ----------------------------------------------

  inline Vector2d* New() const { return New(NULL); }

  Vector2d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2d* other);
  void UnsafeMergeFrom(const Vector2d& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector2d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vector2d> Vector2d_default_instance_;

// -------------------------------------------------------------------

class Vector2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector2f) */ {
 public:
  Vector2f();
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2f& default_instance();

  static const Vector2f* internal_default_instance();

  void Swap(Vector2f* other);

  // implements Message ----------------------------------------------

  inline Vector2f* New() const { return New(NULL); }

  Vector2f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2f* other);
  void UnsafeMergeFrom(const Vector2f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector2f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vector2f> Vector2f_default_instance_;

// -------------------------------------------------------------------

class Vector3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector3d) */ {
 public:
  Vector3d();
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();

  static const Vector3d* internal_default_instance();

  void Swap(Vector3d* other);

  // implements Message ----------------------------------------------

  inline Vector3d* New() const { return New(NULL); }

  Vector3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3d* other);
  void UnsafeMergeFrom(const Vector3d& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vector3d> Vector3d_default_instance_;

// -------------------------------------------------------------------

class Vector3f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector3f) */ {
 public:
  Vector3f();
  virtual ~Vector3f();

  Vector3f(const Vector3f& from);

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3f& default_instance();

  static const Vector3f* internal_default_instance();

  void Swap(Vector3f* other);

  // implements Message ----------------------------------------------

  inline Vector3f* New() const { return New(NULL); }

  Vector3f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3f& from);
  void MergeFrom(const Vector3f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3f* other);
  void UnsafeMergeFrom(const Vector3f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector3f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vector3f> Vector3f_default_instance_;

// -------------------------------------------------------------------

class Vector4f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector4f) */ {
 public:
  Vector4f();
  virtual ~Vector4f();

  Vector4f(const Vector4f& from);

  inline Vector4f& operator=(const Vector4f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector4f& default_instance();

  static const Vector4f* internal_default_instance();

  void Swap(Vector4f* other);

  // implements Message ----------------------------------------------

  inline Vector4f* New() const { return New(NULL); }

  Vector4f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector4f& from);
  void MergeFrom(const Vector4f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector4f* other);
  void UnsafeMergeFrom(const Vector4f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float t = 4;
  void clear_t();
  static const int kTFieldNumber = 4;
  float t() const;
  void set_t(float value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector4f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float t_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vector4f> Vector4f_default_instance_;

// -------------------------------------------------------------------

class Quaterniond : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Quaterniond) */ {
 public:
  Quaterniond();
  virtual ~Quaterniond();

  Quaterniond(const Quaterniond& from);

  inline Quaterniond& operator=(const Quaterniond& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaterniond& default_instance();

  static const Quaterniond* internal_default_instance();

  void Swap(Quaterniond* other);

  // implements Message ----------------------------------------------

  inline Quaterniond* New() const { return New(NULL); }

  Quaterniond* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaterniond& from);
  void MergeFrom(const Quaterniond& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Quaterniond* other);
  void UnsafeMergeFrom(const Quaterniond& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // optional double w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  double w() const;
  void set_w(double value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Quaterniond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Quaterniond> Quaterniond_default_instance_;

// -------------------------------------------------------------------

class Quaternionf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Quaternionf) */ {
 public:
  Quaternionf();
  virtual ~Quaternionf();

  Quaternionf(const Quaternionf& from);

  inline Quaternionf& operator=(const Quaternionf& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternionf& default_instance();

  static const Quaternionf* internal_default_instance();

  void Swap(Quaternionf* other);

  // implements Message ----------------------------------------------

  inline Quaternionf* New() const { return New(NULL); }

  Quaternionf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternionf& from);
  void MergeFrom(const Quaternionf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Quaternionf* other);
  void UnsafeMergeFrom(const Quaternionf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float w = 4;
  void clear_w();
  static const int kWFieldNumber = 4;
  float w() const;
  void set_w(float value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Quaternionf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Quaternionf> Quaternionf_default_instance_;

// -------------------------------------------------------------------

class Transform2d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform2d) */ {
 public:
  Transform2d();
  virtual ~Transform2d();

  Transform2d(const Transform2d& from);

  inline Transform2d& operator=(const Transform2d& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform2d& default_instance();

  static const Transform2d* internal_default_instance();

  void Swap(Transform2d* other);

  // implements Message ----------------------------------------------

  inline Transform2d* New() const { return New(NULL); }

  Transform2d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform2d& from);
  void MergeFrom(const Transform2d& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform2d* other);
  void UnsafeMergeFrom(const Transform2d& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lifelong_backend.transform.proto.Vector2d translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::lifelong_backend::transform::proto::Vector2d& translation() const;
  ::lifelong_backend::transform::proto::Vector2d* mutable_translation();
  ::lifelong_backend::transform::proto::Vector2d* release_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector2d* translation);

  // optional double rotation = 2;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  double rotation() const;
  void set_rotation(double value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform2d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lifelong_backend::transform::proto::Vector2d* translation_;
  double rotation_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Transform2d> Transform2d_default_instance_;

// -------------------------------------------------------------------

class Transform2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform2f) */ {
 public:
  Transform2f();
  virtual ~Transform2f();

  Transform2f(const Transform2f& from);

  inline Transform2f& operator=(const Transform2f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform2f& default_instance();

  static const Transform2f* internal_default_instance();

  void Swap(Transform2f* other);

  // implements Message ----------------------------------------------

  inline Transform2f* New() const { return New(NULL); }

  Transform2f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform2f& from);
  void MergeFrom(const Transform2f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform2f* other);
  void UnsafeMergeFrom(const Transform2f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lifelong_backend.transform.proto.Vector2f translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::lifelong_backend::transform::proto::Vector2f& translation() const;
  ::lifelong_backend::transform::proto::Vector2f* mutable_translation();
  ::lifelong_backend::transform::proto::Vector2f* release_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector2f* translation);

  // optional float rotation = 2;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  float rotation() const;
  void set_rotation(float value);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform2f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lifelong_backend::transform::proto::Vector2f* translation_;
  float rotation_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Transform2f> Transform2f_default_instance_;

// -------------------------------------------------------------------

class Transform3d : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform3d) */ {
 public:
  Transform3d();
  virtual ~Transform3d();

  Transform3d(const Transform3d& from);

  inline Transform3d& operator=(const Transform3d& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform3d& default_instance();

  static const Transform3d* internal_default_instance();

  void Swap(Transform3d* other);

  // implements Message ----------------------------------------------

  inline Transform3d* New() const { return New(NULL); }

  Transform3d* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform3d& from);
  void MergeFrom(const Transform3d& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform3d* other);
  void UnsafeMergeFrom(const Transform3d& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lifelong_backend.transform.proto.Vector3d translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::lifelong_backend::transform::proto::Vector3d& translation() const;
  ::lifelong_backend::transform::proto::Vector3d* mutable_translation();
  ::lifelong_backend::transform::proto::Vector3d* release_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector3d* translation);

  // optional .lifelong_backend.transform.proto.Quaterniond rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::lifelong_backend::transform::proto::Quaterniond& rotation() const;
  ::lifelong_backend::transform::proto::Quaterniond* mutable_rotation();
  ::lifelong_backend::transform::proto::Quaterniond* release_rotation();
  void set_allocated_rotation(::lifelong_backend::transform::proto::Quaterniond* rotation);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform3d)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lifelong_backend::transform::proto::Vector3d* translation_;
  ::lifelong_backend::transform::proto::Quaterniond* rotation_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Transform3d> Transform3d_default_instance_;

// -------------------------------------------------------------------

class Transform3f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform3f) */ {
 public:
  Transform3f();
  virtual ~Transform3f();

  Transform3f(const Transform3f& from);

  inline Transform3f& operator=(const Transform3f& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform3f& default_instance();

  static const Transform3f* internal_default_instance();

  void Swap(Transform3f* other);

  // implements Message ----------------------------------------------

  inline Transform3f* New() const { return New(NULL); }

  Transform3f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Transform3f& from);
  void MergeFrom(const Transform3f& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Transform3f* other);
  void UnsafeMergeFrom(const Transform3f& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .lifelong_backend.transform.proto.Vector3f translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::lifelong_backend::transform::proto::Vector3f& translation() const;
  ::lifelong_backend::transform::proto::Vector3f* mutable_translation();
  ::lifelong_backend::transform::proto::Vector3f* release_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector3f* translation);

  // optional .lifelong_backend.transform.proto.Quaternionf rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::lifelong_backend::transform::proto::Quaternionf& rotation() const;
  ::lifelong_backend::transform::proto::Quaternionf* mutable_rotation();
  ::lifelong_backend::transform::proto::Quaternionf* release_rotation();
  void set_allocated_rotation(::lifelong_backend::transform::proto::Quaternionf* rotation);

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform3f)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lifelong_backend::transform::proto::Vector3f* translation_;
  ::lifelong_backend::transform::proto::Quaternionf* rotation_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_transform_2eproto_impl();
  friend void  protobuf_AddDesc_transform_2eproto_impl();
  friend void protobuf_AssignDesc_transform_2eproto();
  friend void protobuf_ShutdownFile_transform_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Transform3f> Transform3f_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2d

// optional double x = 1;
inline void Vector2d::clear_x() {
  x_ = 0;
}
inline double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2d.x)
  return x_;
}
inline void Vector2d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2d.x)
}

// optional double y = 2;
inline void Vector2d::clear_y() {
  y_ = 0;
}
inline double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2d.y)
  return y_;
}
inline void Vector2d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2d.y)
}

inline const Vector2d* Vector2d::internal_default_instance() {
  return &Vector2d_default_instance_.get();
}
// -------------------------------------------------------------------

// Vector2f

// optional float x = 1;
inline void Vector2f::clear_x() {
  x_ = 0;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2f.x)
  return x_;
}
inline void Vector2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2f.x)
}

// optional float y = 2;
inline void Vector2f::clear_y() {
  y_ = 0;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2f.y)
  return y_;
}
inline void Vector2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2f.y)
}

inline const Vector2f* Vector2f::internal_default_instance() {
  return &Vector2f_default_instance_.get();
}
// -------------------------------------------------------------------

// Vector3d

// optional double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.x)
  return x_;
}
inline void Vector3d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.x)
}

// optional double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.y)
  return y_;
}
inline void Vector3d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.y)
}

// optional double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.z)
  return z_;
}
inline void Vector3d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.z)
}

inline const Vector3d* Vector3d::internal_default_instance() {
  return &Vector3d_default_instance_.get();
}
// -------------------------------------------------------------------

// Vector3f

// optional float x = 1;
inline void Vector3f::clear_x() {
  x_ = 0;
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.x)
  return x_;
}
inline void Vector3f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.x)
}

// optional float y = 2;
inline void Vector3f::clear_y() {
  y_ = 0;
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.y)
  return y_;
}
inline void Vector3f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.y)
}

// optional float z = 3;
inline void Vector3f::clear_z() {
  z_ = 0;
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.z)
  return z_;
}
inline void Vector3f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.z)
}

inline const Vector3f* Vector3f::internal_default_instance() {
  return &Vector3f_default_instance_.get();
}
// -------------------------------------------------------------------

// Vector4f

// optional float x = 1;
inline void Vector4f::clear_x() {
  x_ = 0;
}
inline float Vector4f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.x)
  return x_;
}
inline void Vector4f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.x)
}

// optional float y = 2;
inline void Vector4f::clear_y() {
  y_ = 0;
}
inline float Vector4f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.y)
  return y_;
}
inline void Vector4f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.y)
}

// optional float z = 3;
inline void Vector4f::clear_z() {
  z_ = 0;
}
inline float Vector4f::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.z)
  return z_;
}
inline void Vector4f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.z)
}

// optional float t = 4;
inline void Vector4f::clear_t() {
  t_ = 0;
}
inline float Vector4f::t() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.t)
  return t_;
}
inline void Vector4f::set_t(float value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.t)
}

inline const Vector4f* Vector4f::internal_default_instance() {
  return &Vector4f_default_instance_.get();
}
// -------------------------------------------------------------------

// Quaterniond

// optional double x = 1;
inline void Quaterniond::clear_x() {
  x_ = 0;
}
inline double Quaterniond::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.x)
  return x_;
}
inline void Quaterniond::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.x)
}

// optional double y = 2;
inline void Quaterniond::clear_y() {
  y_ = 0;
}
inline double Quaterniond::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.y)
  return y_;
}
inline void Quaterniond::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.y)
}

// optional double z = 3;
inline void Quaterniond::clear_z() {
  z_ = 0;
}
inline double Quaterniond::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.z)
  return z_;
}
inline void Quaterniond::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.z)
}

// optional double w = 4;
inline void Quaterniond::clear_w() {
  w_ = 0;
}
inline double Quaterniond::w() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.w)
  return w_;
}
inline void Quaterniond::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.w)
}

inline const Quaterniond* Quaterniond::internal_default_instance() {
  return &Quaterniond_default_instance_.get();
}
// -------------------------------------------------------------------

// Quaternionf

// optional float x = 1;
inline void Quaternionf::clear_x() {
  x_ = 0;
}
inline float Quaternionf::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.x)
  return x_;
}
inline void Quaternionf::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.x)
}

// optional float y = 2;
inline void Quaternionf::clear_y() {
  y_ = 0;
}
inline float Quaternionf::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.y)
  return y_;
}
inline void Quaternionf::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.y)
}

// optional float z = 3;
inline void Quaternionf::clear_z() {
  z_ = 0;
}
inline float Quaternionf::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.z)
  return z_;
}
inline void Quaternionf::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.z)
}

// optional float w = 4;
inline void Quaternionf::clear_w() {
  w_ = 0;
}
inline float Quaternionf::w() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.w)
  return w_;
}
inline void Quaternionf::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.w)
}

inline const Quaternionf* Quaternionf::internal_default_instance() {
  return &Quaternionf_default_instance_.get();
}
// -------------------------------------------------------------------

// Transform2d

// optional .lifelong_backend.transform.proto.Vector2d translation = 1;
inline bool Transform2d::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
inline void Transform2d::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Vector2d& Transform2d::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2d.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector2d::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Vector2d* Transform2d::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform2d.translation)
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector2d* Transform2d::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform2d.translation)
  
  ::lifelong_backend::transform::proto::Vector2d* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transform2d::set_allocated_translation(::lifelong_backend::transform::proto::Vector2d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform2d.translation)
}

// optional double rotation = 2;
inline void Transform2d::clear_rotation() {
  rotation_ = 0;
}
inline double Transform2d::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2d.rotation)
  return rotation_;
}
inline void Transform2d::set_rotation(double value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Transform2d.rotation)
}

inline const Transform2d* Transform2d::internal_default_instance() {
  return &Transform2d_default_instance_.get();
}
// -------------------------------------------------------------------

// Transform2f

// optional .lifelong_backend.transform.proto.Vector2f translation = 1;
inline bool Transform2f::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
inline void Transform2f::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Vector2f& Transform2f::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2f.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector2f::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Vector2f* Transform2f::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform2f.translation)
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector2f* Transform2f::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform2f.translation)
  
  ::lifelong_backend::transform::proto::Vector2f* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transform2f::set_allocated_translation(::lifelong_backend::transform::proto::Vector2f* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform2f.translation)
}

// optional float rotation = 2;
inline void Transform2f::clear_rotation() {
  rotation_ = 0;
}
inline float Transform2f::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2f.rotation)
  return rotation_;
}
inline void Transform2f::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Transform2f.rotation)
}

inline const Transform2f* Transform2f::internal_default_instance() {
  return &Transform2f_default_instance_.get();
}
// -------------------------------------------------------------------

// Transform3d

// optional .lifelong_backend.transform.proto.Vector3d translation = 1;
inline bool Transform3d::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
inline void Transform3d::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Vector3d& Transform3d::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3d.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector3d::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Vector3d* Transform3d::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3d.translation)
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector3d* Transform3d::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3d.translation)
  
  ::lifelong_backend::transform::proto::Vector3d* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transform3d::set_allocated_translation(::lifelong_backend::transform::proto::Vector3d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3d.translation)
}

// optional .lifelong_backend.transform.proto.Quaterniond rotation = 2;
inline bool Transform3d::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void Transform3d::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Quaterniond& Transform3d::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3d.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::lifelong_backend::transform::proto::Quaterniond::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Quaterniond* Transform3d::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::lifelong_backend::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3d.rotation)
  return rotation_;
}
inline ::lifelong_backend::transform::proto::Quaterniond* Transform3d::release_rotation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3d.rotation)
  
  ::lifelong_backend::transform::proto::Quaterniond* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Transform3d::set_allocated_rotation(::lifelong_backend::transform::proto::Quaterniond* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3d.rotation)
}

inline const Transform3d* Transform3d::internal_default_instance() {
  return &Transform3d_default_instance_.get();
}
// -------------------------------------------------------------------

// Transform3f

// optional .lifelong_backend.transform.proto.Vector3f translation = 1;
inline bool Transform3f::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
inline void Transform3f::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Vector3f& Transform3f::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3f.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector3f::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Vector3f* Transform3f::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3f.translation)
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector3f* Transform3f::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3f.translation)
  
  ::lifelong_backend::transform::proto::Vector3f* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transform3f::set_allocated_translation(::lifelong_backend::transform::proto::Vector3f* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3f.translation)
}

// optional .lifelong_backend.transform.proto.Quaternionf rotation = 2;
inline bool Transform3f::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void Transform3f::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Quaternionf& Transform3f::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3f.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::lifelong_backend::transform::proto::Quaternionf::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Quaternionf* Transform3f::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::lifelong_backend::transform::proto::Quaternionf;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3f.rotation)
  return rotation_;
}
inline ::lifelong_backend::transform::proto::Quaternionf* Transform3f::release_rotation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3f.rotation)
  
  ::lifelong_backend::transform::proto::Quaternionf* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Transform3f::set_allocated_rotation(::lifelong_backend::transform::proto::Quaternionf* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3f.rotation)
}

inline const Transform3f* Transform3f::internal_default_instance() {
  return &Transform3f_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace transform
}  // namespace lifelong_backend

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transform_2eproto__INCLUDED
