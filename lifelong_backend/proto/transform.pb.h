// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transform_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transform_2eproto;
namespace lifelong_backend {
namespace transform {
namespace proto {
class Quaterniond;
class QuaterniondDefaultTypeInternal;
extern QuaterniondDefaultTypeInternal _Quaterniond_default_instance_;
class Quaternionf;
class QuaternionfDefaultTypeInternal;
extern QuaternionfDefaultTypeInternal _Quaternionf_default_instance_;
class Transform2d;
class Transform2dDefaultTypeInternal;
extern Transform2dDefaultTypeInternal _Transform2d_default_instance_;
class Transform2f;
class Transform2fDefaultTypeInternal;
extern Transform2fDefaultTypeInternal _Transform2f_default_instance_;
class Transform3d;
class Transform3dDefaultTypeInternal;
extern Transform3dDefaultTypeInternal _Transform3d_default_instance_;
class Transform3f;
class Transform3fDefaultTypeInternal;
extern Transform3fDefaultTypeInternal _Transform3f_default_instance_;
class Vector2d;
class Vector2dDefaultTypeInternal;
extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
class Vector2f;
class Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
class Vector3d;
class Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
class Vector3f;
class Vector3fDefaultTypeInternal;
extern Vector3fDefaultTypeInternal _Vector3f_default_instance_;
class Vector4f;
class Vector4fDefaultTypeInternal;
extern Vector4fDefaultTypeInternal _Vector4f_default_instance_;
}  // namespace proto
}  // namespace transform
}  // namespace lifelong_backend
PROTOBUF_NAMESPACE_OPEN
template<> ::lifelong_backend::transform::proto::Quaterniond* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Quaterniond>(Arena*);
template<> ::lifelong_backend::transform::proto::Quaternionf* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Quaternionf>(Arena*);
template<> ::lifelong_backend::transform::proto::Transform2d* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Transform2d>(Arena*);
template<> ::lifelong_backend::transform::proto::Transform2f* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Transform2f>(Arena*);
template<> ::lifelong_backend::transform::proto::Transform3d* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Transform3d>(Arena*);
template<> ::lifelong_backend::transform::proto::Transform3f* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Transform3f>(Arena*);
template<> ::lifelong_backend::transform::proto::Vector2d* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Vector2d>(Arena*);
template<> ::lifelong_backend::transform::proto::Vector2f* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Vector2f>(Arena*);
template<> ::lifelong_backend::transform::proto::Vector3d* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Vector3d>(Arena*);
template<> ::lifelong_backend::transform::proto::Vector3f* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Vector3f>(Arena*);
template<> ::lifelong_backend::transform::proto::Vector4f* Arena::CreateMaybeMessage<::lifelong_backend::transform::proto::Vector4f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lifelong_backend {
namespace transform {
namespace proto {

// ===================================================================

class Vector2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector2d) */ {
 public:
  inline Vector2d() : Vector2d(nullptr) {};
  virtual ~Vector2d();

  Vector2d(const Vector2d& from);
  Vector2d(Vector2d&& from) noexcept
    : Vector2d() {
    *this = ::std::move(from);
  }

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2d& operator=(Vector2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2d* internal_default_instance() {
    return reinterpret_cast<const Vector2d*>(
               &_Vector2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2d& a, Vector2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2d* New() const final {
    return CreateMaybeMessage<Vector2d>(nullptr);
  }

  Vector2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Vector2d";
  }
  protected:
  explicit Vector2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Vector2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector2f) */ {
 public:
  inline Vector2f() : Vector2f(nullptr) {};
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2f* New() const final {
    return CreateMaybeMessage<Vector2f>(nullptr);
  }

  Vector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Vector2f";
  }
  protected:
  explicit Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Vector3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector3d) */ {
 public:
  inline Vector3d() : Vector3d(nullptr) {};
  virtual ~Vector3d();

  Vector3d(const Vector3d& from);
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const final {
    return CreateMaybeMessage<Vector3d>(nullptr);
  }

  Vector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Vector3d";
  }
  protected:
  explicit Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Vector3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector3f) */ {
 public:
  inline Vector3f() : Vector3f(nullptr) {};
  virtual ~Vector3f();

  Vector3f(const Vector3f& from);
  Vector3f(Vector3f&& from) noexcept
    : Vector3f() {
    *this = ::std::move(from);
  }

  inline Vector3f& operator=(const Vector3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3f& operator=(Vector3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3f* internal_default_instance() {
    return reinterpret_cast<const Vector3f*>(
               &_Vector3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vector3f& a, Vector3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3f* New() const final {
    return CreateMaybeMessage<Vector3f>(nullptr);
  }

  Vector3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3f& from);
  void MergeFrom(const Vector3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Vector3f";
  }
  protected:
  explicit Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Vector4f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Vector4f) */ {
 public:
  inline Vector4f() : Vector4f(nullptr) {};
  virtual ~Vector4f();

  Vector4f(const Vector4f& from);
  Vector4f(Vector4f&& from) noexcept
    : Vector4f() {
    *this = ::std::move(from);
  }

  inline Vector4f& operator=(const Vector4f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector4f& operator=(Vector4f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector4f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector4f* internal_default_instance() {
    return reinterpret_cast<const Vector4f*>(
               &_Vector4f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Vector4f& a, Vector4f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector4f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector4f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector4f* New() const final {
    return CreateMaybeMessage<Vector4f>(nullptr);
  }

  Vector4f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector4f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector4f& from);
  void MergeFrom(const Vector4f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector4f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Vector4f";
  }
  protected:
  explicit Vector4f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float t = 4;
  void clear_t();
  float t() const;
  void set_t(float value);
  private:
  float _internal_t() const;
  void _internal_set_t(float value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Vector4f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Quaterniond PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Quaterniond) */ {
 public:
  inline Quaterniond() : Quaterniond(nullptr) {};
  virtual ~Quaterniond();

  Quaterniond(const Quaterniond& from);
  Quaterniond(Quaterniond&& from) noexcept
    : Quaterniond() {
    *this = ::std::move(from);
  }

  inline Quaterniond& operator=(const Quaterniond& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaterniond& operator=(Quaterniond&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaterniond& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaterniond* internal_default_instance() {
    return reinterpret_cast<const Quaterniond*>(
               &_Quaterniond_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Quaterniond& a, Quaterniond& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaterniond* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaterniond* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaterniond* New() const final {
    return CreateMaybeMessage<Quaterniond>(nullptr);
  }

  Quaterniond* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaterniond>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaterniond& from);
  void MergeFrom(const Quaterniond& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaterniond* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Quaterniond";
  }
  protected:
  explicit Quaterniond(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Quaterniond)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Quaternionf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Quaternionf) */ {
 public:
  inline Quaternionf() : Quaternionf(nullptr) {};
  virtual ~Quaternionf();

  Quaternionf(const Quaternionf& from);
  Quaternionf(Quaternionf&& from) noexcept
    : Quaternionf() {
    *this = ::std::move(from);
  }

  inline Quaternionf& operator=(const Quaternionf& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternionf& operator=(Quaternionf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternionf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternionf* internal_default_instance() {
    return reinterpret_cast<const Quaternionf*>(
               &_Quaternionf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Quaternionf& a, Quaternionf& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternionf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternionf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternionf* New() const final {
    return CreateMaybeMessage<Quaternionf>(nullptr);
  }

  Quaternionf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternionf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternionf& from);
  void MergeFrom(const Quaternionf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternionf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Quaternionf";
  }
  protected:
  explicit Quaternionf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Quaternionf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Transform2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform2d) */ {
 public:
  inline Transform2d() : Transform2d(nullptr) {};
  virtual ~Transform2d();

  Transform2d(const Transform2d& from);
  Transform2d(Transform2d&& from) noexcept
    : Transform2d() {
    *this = ::std::move(from);
  }

  inline Transform2d& operator=(const Transform2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform2d& operator=(Transform2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform2d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform2d* internal_default_instance() {
    return reinterpret_cast<const Transform2d*>(
               &_Transform2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Transform2d& a, Transform2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform2d* New() const final {
    return CreateMaybeMessage<Transform2d>(nullptr);
  }

  Transform2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform2d& from);
  void MergeFrom(const Transform2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Transform2d";
  }
  protected:
  explicit Transform2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .lifelong_backend.transform.proto.Vector2d translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::lifelong_backend::transform::proto::Vector2d& translation() const;
  ::lifelong_backend::transform::proto::Vector2d* release_translation();
  ::lifelong_backend::transform::proto::Vector2d* mutable_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector2d* translation);
  private:
  const ::lifelong_backend::transform::proto::Vector2d& _internal_translation() const;
  ::lifelong_backend::transform::proto::Vector2d* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::lifelong_backend::transform::proto::Vector2d* translation);
  ::lifelong_backend::transform::proto::Vector2d* unsafe_arena_release_translation();

  // double rotation = 2;
  void clear_rotation();
  double rotation() const;
  void set_rotation(double value);
  private:
  double _internal_rotation() const;
  void _internal_set_rotation(double value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::lifelong_backend::transform::proto::Vector2d* translation_;
  double rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Transform2f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform2f) */ {
 public:
  inline Transform2f() : Transform2f(nullptr) {};
  virtual ~Transform2f();

  Transform2f(const Transform2f& from);
  Transform2f(Transform2f&& from) noexcept
    : Transform2f() {
    *this = ::std::move(from);
  }

  inline Transform2f& operator=(const Transform2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform2f& operator=(Transform2f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform2f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform2f* internal_default_instance() {
    return reinterpret_cast<const Transform2f*>(
               &_Transform2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Transform2f& a, Transform2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform2f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform2f* New() const final {
    return CreateMaybeMessage<Transform2f>(nullptr);
  }

  Transform2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform2f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform2f& from);
  void MergeFrom(const Transform2f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform2f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Transform2f";
  }
  protected:
  explicit Transform2f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .lifelong_backend.transform.proto.Vector2f translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::lifelong_backend::transform::proto::Vector2f& translation() const;
  ::lifelong_backend::transform::proto::Vector2f* release_translation();
  ::lifelong_backend::transform::proto::Vector2f* mutable_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector2f* translation);
  private:
  const ::lifelong_backend::transform::proto::Vector2f& _internal_translation() const;
  ::lifelong_backend::transform::proto::Vector2f* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::lifelong_backend::transform::proto::Vector2f* translation);
  ::lifelong_backend::transform::proto::Vector2f* unsafe_arena_release_translation();

  // float rotation = 2;
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform2f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::lifelong_backend::transform::proto::Vector2f* translation_;
  float rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Transform3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform3d) */ {
 public:
  inline Transform3d() : Transform3d(nullptr) {};
  virtual ~Transform3d();

  Transform3d(const Transform3d& from);
  Transform3d(Transform3d&& from) noexcept
    : Transform3d() {
    *this = ::std::move(from);
  }

  inline Transform3d& operator=(const Transform3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform3d& operator=(Transform3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform3d& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform3d* internal_default_instance() {
    return reinterpret_cast<const Transform3d*>(
               &_Transform3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Transform3d& a, Transform3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform3d* New() const final {
    return CreateMaybeMessage<Transform3d>(nullptr);
  }

  Transform3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform3d& from);
  void MergeFrom(const Transform3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Transform3d";
  }
  protected:
  explicit Transform3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .lifelong_backend.transform.proto.Vector3d translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::lifelong_backend::transform::proto::Vector3d& translation() const;
  ::lifelong_backend::transform::proto::Vector3d* release_translation();
  ::lifelong_backend::transform::proto::Vector3d* mutable_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector3d* translation);
  private:
  const ::lifelong_backend::transform::proto::Vector3d& _internal_translation() const;
  ::lifelong_backend::transform::proto::Vector3d* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::lifelong_backend::transform::proto::Vector3d* translation);
  ::lifelong_backend::transform::proto::Vector3d* unsafe_arena_release_translation();

  // .lifelong_backend.transform.proto.Quaterniond rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::lifelong_backend::transform::proto::Quaterniond& rotation() const;
  ::lifelong_backend::transform::proto::Quaterniond* release_rotation();
  ::lifelong_backend::transform::proto::Quaterniond* mutable_rotation();
  void set_allocated_rotation(::lifelong_backend::transform::proto::Quaterniond* rotation);
  private:
  const ::lifelong_backend::transform::proto::Quaterniond& _internal_rotation() const;
  ::lifelong_backend::transform::proto::Quaterniond* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::lifelong_backend::transform::proto::Quaterniond* rotation);
  ::lifelong_backend::transform::proto::Quaterniond* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::lifelong_backend::transform::proto::Vector3d* translation_;
  ::lifelong_backend::transform::proto::Quaterniond* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class Transform3f PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.transform.proto.Transform3f) */ {
 public:
  inline Transform3f() : Transform3f(nullptr) {};
  virtual ~Transform3f();

  Transform3f(const Transform3f& from);
  Transform3f(Transform3f&& from) noexcept
    : Transform3f() {
    *this = ::std::move(from);
  }

  inline Transform3f& operator=(const Transform3f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform3f& operator=(Transform3f&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform3f& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transform3f* internal_default_instance() {
    return reinterpret_cast<const Transform3f*>(
               &_Transform3f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Transform3f& a, Transform3f& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform3f* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform3f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform3f* New() const final {
    return CreateMaybeMessage<Transform3f>(nullptr);
  }

  Transform3f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform3f>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform3f& from);
  void MergeFrom(const Transform3f& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform3f* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lifelong_backend.transform.proto.Transform3f";
  }
  protected:
  explicit Transform3f(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transform_2eproto);
    return ::descriptor_table_transform_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .lifelong_backend.transform.proto.Vector3f translation = 1;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::lifelong_backend::transform::proto::Vector3f& translation() const;
  ::lifelong_backend::transform::proto::Vector3f* release_translation();
  ::lifelong_backend::transform::proto::Vector3f* mutable_translation();
  void set_allocated_translation(::lifelong_backend::transform::proto::Vector3f* translation);
  private:
  const ::lifelong_backend::transform::proto::Vector3f& _internal_translation() const;
  ::lifelong_backend::transform::proto::Vector3f* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::lifelong_backend::transform::proto::Vector3f* translation);
  ::lifelong_backend::transform::proto::Vector3f* unsafe_arena_release_translation();

  // .lifelong_backend.transform.proto.Quaternionf rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::lifelong_backend::transform::proto::Quaternionf& rotation() const;
  ::lifelong_backend::transform::proto::Quaternionf* release_rotation();
  ::lifelong_backend::transform::proto::Quaternionf* mutable_rotation();
  void set_allocated_rotation(::lifelong_backend::transform::proto::Quaternionf* rotation);
  private:
  const ::lifelong_backend::transform::proto::Quaternionf& _internal_rotation() const;
  ::lifelong_backend::transform::proto::Quaternionf* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::lifelong_backend::transform::proto::Quaternionf* rotation);
  ::lifelong_backend::transform::proto::Quaternionf* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:lifelong_backend.transform.proto.Transform3f)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::lifelong_backend::transform::proto::Vector3f* translation_;
  ::lifelong_backend::transform::proto::Quaternionf* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2d

// double x = 1;
inline void Vector2d::clear_x() {
  x_ = 0;
}
inline double Vector2d::_internal_x() const {
  return x_;
}
inline double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2d.x)
  return _internal_x();
}
inline void Vector2d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector2d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2d.x)
}

// double y = 2;
inline void Vector2d::clear_y() {
  y_ = 0;
}
inline double Vector2d::_internal_y() const {
  return y_;
}
inline double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2d.y)
  return _internal_y();
}
inline void Vector2d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector2d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2d.y)
}

// -------------------------------------------------------------------

// Vector2f

// float x = 1;
inline void Vector2f::clear_x() {
  x_ = 0;
}
inline float Vector2f::_internal_x() const {
  return x_;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2f.x)
  return _internal_x();
}
inline void Vector2f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2f.x)
}

// float y = 2;
inline void Vector2f::clear_y() {
  y_ = 0;
}
inline float Vector2f::_internal_y() const {
  return y_;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2f.y)
  return _internal_y();
}
inline void Vector2f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2f.y)
}

// -------------------------------------------------------------------

// Vector3d

// double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::_internal_x() const {
  return x_;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.x)
  return _internal_x();
}
inline void Vector3d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.x)
}

// double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::_internal_y() const {
  return y_;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.y)
  return _internal_y();
}
inline void Vector3d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.y)
}

// double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::_internal_z() const {
  return z_;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.z)
  return _internal_z();
}
inline void Vector3d::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.z)
}

// -------------------------------------------------------------------

// Vector3f

// float x = 1;
inline void Vector3f::clear_x() {
  x_ = 0;
}
inline float Vector3f::_internal_x() const {
  return x_;
}
inline float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.x)
  return _internal_x();
}
inline void Vector3f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.x)
}

// float y = 2;
inline void Vector3f::clear_y() {
  y_ = 0;
}
inline float Vector3f::_internal_y() const {
  return y_;
}
inline float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.y)
  return _internal_y();
}
inline void Vector3f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.y)
}

// float z = 3;
inline void Vector3f::clear_z() {
  z_ = 0;
}
inline float Vector3f::_internal_z() const {
  return z_;
}
inline float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.z)
  return _internal_z();
}
inline void Vector3f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.z)
}

// -------------------------------------------------------------------

// Vector4f

// float x = 1;
inline void Vector4f::clear_x() {
  x_ = 0;
}
inline float Vector4f::_internal_x() const {
  return x_;
}
inline float Vector4f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.x)
  return _internal_x();
}
inline void Vector4f::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector4f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.x)
}

// float y = 2;
inline void Vector4f::clear_y() {
  y_ = 0;
}
inline float Vector4f::_internal_y() const {
  return y_;
}
inline float Vector4f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.y)
  return _internal_y();
}
inline void Vector4f::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector4f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.y)
}

// float z = 3;
inline void Vector4f::clear_z() {
  z_ = 0;
}
inline float Vector4f::_internal_z() const {
  return z_;
}
inline float Vector4f::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.z)
  return _internal_z();
}
inline void Vector4f::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector4f::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.z)
}

// float t = 4;
inline void Vector4f::clear_t() {
  t_ = 0;
}
inline float Vector4f::_internal_t() const {
  return t_;
}
inline float Vector4f::t() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.t)
  return _internal_t();
}
inline void Vector4f::_internal_set_t(float value) {
  
  t_ = value;
}
inline void Vector4f::set_t(float value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.t)
}

// -------------------------------------------------------------------

// Quaterniond

// double x = 1;
inline void Quaterniond::clear_x() {
  x_ = 0;
}
inline double Quaterniond::_internal_x() const {
  return x_;
}
inline double Quaterniond::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.x)
  return _internal_x();
}
inline void Quaterniond::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaterniond::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.x)
}

// double y = 2;
inline void Quaterniond::clear_y() {
  y_ = 0;
}
inline double Quaterniond::_internal_y() const {
  return y_;
}
inline double Quaterniond::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.y)
  return _internal_y();
}
inline void Quaterniond::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaterniond::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.y)
}

// double z = 3;
inline void Quaterniond::clear_z() {
  z_ = 0;
}
inline double Quaterniond::_internal_z() const {
  return z_;
}
inline double Quaterniond::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.z)
  return _internal_z();
}
inline void Quaterniond::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaterniond::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.z)
}

// double w = 4;
inline void Quaterniond::clear_w() {
  w_ = 0;
}
inline double Quaterniond::_internal_w() const {
  return w_;
}
inline double Quaterniond::w() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.w)
  return _internal_w();
}
inline void Quaterniond::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaterniond::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.w)
}

// -------------------------------------------------------------------

// Quaternionf

// float x = 1;
inline void Quaternionf::clear_x() {
  x_ = 0;
}
inline float Quaternionf::_internal_x() const {
  return x_;
}
inline float Quaternionf::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.x)
  return _internal_x();
}
inline void Quaternionf::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternionf::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.x)
}

// float y = 2;
inline void Quaternionf::clear_y() {
  y_ = 0;
}
inline float Quaternionf::_internal_y() const {
  return y_;
}
inline float Quaternionf::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.y)
  return _internal_y();
}
inline void Quaternionf::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternionf::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.y)
}

// float z = 3;
inline void Quaternionf::clear_z() {
  z_ = 0;
}
inline float Quaternionf::_internal_z() const {
  return z_;
}
inline float Quaternionf::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.z)
  return _internal_z();
}
inline void Quaternionf::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternionf::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.z)
}

// float w = 4;
inline void Quaternionf::clear_w() {
  w_ = 0;
}
inline float Quaternionf::_internal_w() const {
  return w_;
}
inline float Quaternionf::w() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.w)
  return _internal_w();
}
inline void Quaternionf::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternionf::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.w)
}

// -------------------------------------------------------------------

// Transform2d

// .lifelong_backend.transform.proto.Vector2d translation = 1;
inline bool Transform2d::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool Transform2d::has_translation() const {
  return _internal_has_translation();
}
inline void Transform2d::clear_translation() {
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::lifelong_backend::transform::proto::Vector2d& Transform2d::_internal_translation() const {
  const ::lifelong_backend::transform::proto::Vector2d* p = translation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lifelong_backend::transform::proto::Vector2d*>(
      &::lifelong_backend::transform::proto::_Vector2d_default_instance_);
}
inline const ::lifelong_backend::transform::proto::Vector2d& Transform2d::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2d.translation)
  return _internal_translation();
}
inline void Transform2d::unsafe_arena_set_allocated_translation(
    ::lifelong_backend::transform::proto::Vector2d* translation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lifelong_backend.transform.proto.Transform2d.translation)
}
inline ::lifelong_backend::transform::proto::Vector2d* Transform2d::release_translation() {
  auto temp = unsafe_arena_release_translation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector2d* Transform2d::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform2d.translation)
  
  ::lifelong_backend::transform::proto::Vector2d* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector2d* Transform2d::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::lifelong_backend::transform::proto::Vector2d>(GetArena());
    translation_ = p;
  }
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector2d* Transform2d::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform2d.translation)
  return _internal_mutable_translation();
}
inline void Transform2d::set_allocated_translation(::lifelong_backend::transform::proto::Vector2d* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform2d.translation)
}

// double rotation = 2;
inline void Transform2d::clear_rotation() {
  rotation_ = 0;
}
inline double Transform2d::_internal_rotation() const {
  return rotation_;
}
inline double Transform2d::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2d.rotation)
  return _internal_rotation();
}
inline void Transform2d::_internal_set_rotation(double value) {
  
  rotation_ = value;
}
inline void Transform2d::set_rotation(double value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Transform2d.rotation)
}

// -------------------------------------------------------------------

// Transform2f

// .lifelong_backend.transform.proto.Vector2f translation = 1;
inline bool Transform2f::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool Transform2f::has_translation() const {
  return _internal_has_translation();
}
inline void Transform2f::clear_translation() {
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::lifelong_backend::transform::proto::Vector2f& Transform2f::_internal_translation() const {
  const ::lifelong_backend::transform::proto::Vector2f* p = translation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lifelong_backend::transform::proto::Vector2f*>(
      &::lifelong_backend::transform::proto::_Vector2f_default_instance_);
}
inline const ::lifelong_backend::transform::proto::Vector2f& Transform2f::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2f.translation)
  return _internal_translation();
}
inline void Transform2f::unsafe_arena_set_allocated_translation(
    ::lifelong_backend::transform::proto::Vector2f* translation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lifelong_backend.transform.proto.Transform2f.translation)
}
inline ::lifelong_backend::transform::proto::Vector2f* Transform2f::release_translation() {
  auto temp = unsafe_arena_release_translation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector2f* Transform2f::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform2f.translation)
  
  ::lifelong_backend::transform::proto::Vector2f* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector2f* Transform2f::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::lifelong_backend::transform::proto::Vector2f>(GetArena());
    translation_ = p;
  }
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector2f* Transform2f::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform2f.translation)
  return _internal_mutable_translation();
}
inline void Transform2f::set_allocated_translation(::lifelong_backend::transform::proto::Vector2f* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform2f.translation)
}

// float rotation = 2;
inline void Transform2f::clear_rotation() {
  rotation_ = 0;
}
inline float Transform2f::_internal_rotation() const {
  return rotation_;
}
inline float Transform2f::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2f.rotation)
  return _internal_rotation();
}
inline void Transform2f::_internal_set_rotation(float value) {
  
  rotation_ = value;
}
inline void Transform2f::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Transform2f.rotation)
}

// -------------------------------------------------------------------

// Transform3d

// .lifelong_backend.transform.proto.Vector3d translation = 1;
inline bool Transform3d::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool Transform3d::has_translation() const {
  return _internal_has_translation();
}
inline void Transform3d::clear_translation() {
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::lifelong_backend::transform::proto::Vector3d& Transform3d::_internal_translation() const {
  const ::lifelong_backend::transform::proto::Vector3d* p = translation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lifelong_backend::transform::proto::Vector3d*>(
      &::lifelong_backend::transform::proto::_Vector3d_default_instance_);
}
inline const ::lifelong_backend::transform::proto::Vector3d& Transform3d::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3d.translation)
  return _internal_translation();
}
inline void Transform3d::unsafe_arena_set_allocated_translation(
    ::lifelong_backend::transform::proto::Vector3d* translation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lifelong_backend.transform.proto.Transform3d.translation)
}
inline ::lifelong_backend::transform::proto::Vector3d* Transform3d::release_translation() {
  auto temp = unsafe_arena_release_translation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector3d* Transform3d::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3d.translation)
  
  ::lifelong_backend::transform::proto::Vector3d* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector3d* Transform3d::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::lifelong_backend::transform::proto::Vector3d>(GetArena());
    translation_ = p;
  }
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector3d* Transform3d::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3d.translation)
  return _internal_mutable_translation();
}
inline void Transform3d::set_allocated_translation(::lifelong_backend::transform::proto::Vector3d* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3d.translation)
}

// .lifelong_backend.transform.proto.Quaterniond rotation = 2;
inline bool Transform3d::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform3d::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform3d::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::lifelong_backend::transform::proto::Quaterniond& Transform3d::_internal_rotation() const {
  const ::lifelong_backend::transform::proto::Quaterniond* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lifelong_backend::transform::proto::Quaterniond*>(
      &::lifelong_backend::transform::proto::_Quaterniond_default_instance_);
}
inline const ::lifelong_backend::transform::proto::Quaterniond& Transform3d::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3d.rotation)
  return _internal_rotation();
}
inline void Transform3d::unsafe_arena_set_allocated_rotation(
    ::lifelong_backend::transform::proto::Quaterniond* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lifelong_backend.transform.proto.Transform3d.rotation)
}
inline ::lifelong_backend::transform::proto::Quaterniond* Transform3d::release_rotation() {
  auto temp = unsafe_arena_release_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lifelong_backend::transform::proto::Quaterniond* Transform3d::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3d.rotation)
  
  ::lifelong_backend::transform::proto::Quaterniond* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::lifelong_backend::transform::proto::Quaterniond* Transform3d::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::lifelong_backend::transform::proto::Quaterniond>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::lifelong_backend::transform::proto::Quaterniond* Transform3d::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3d.rotation)
  return _internal_mutable_rotation();
}
inline void Transform3d::set_allocated_rotation(::lifelong_backend::transform::proto::Quaterniond* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3d.rotation)
}

// -------------------------------------------------------------------

// Transform3f

// .lifelong_backend.transform.proto.Vector3f translation = 1;
inline bool Transform3f::_internal_has_translation() const {
  return this != internal_default_instance() && translation_ != nullptr;
}
inline bool Transform3f::has_translation() const {
  return _internal_has_translation();
}
inline void Transform3f::clear_translation() {
  if (GetArena() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
inline const ::lifelong_backend::transform::proto::Vector3f& Transform3f::_internal_translation() const {
  const ::lifelong_backend::transform::proto::Vector3f* p = translation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lifelong_backend::transform::proto::Vector3f*>(
      &::lifelong_backend::transform::proto::_Vector3f_default_instance_);
}
inline const ::lifelong_backend::transform::proto::Vector3f& Transform3f::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3f.translation)
  return _internal_translation();
}
inline void Transform3f::unsafe_arena_set_allocated_translation(
    ::lifelong_backend::transform::proto::Vector3f* translation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation_);
  }
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lifelong_backend.transform.proto.Transform3f.translation)
}
inline ::lifelong_backend::transform::proto::Vector3f* Transform3f::release_translation() {
  auto temp = unsafe_arena_release_translation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector3f* Transform3f::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3f.translation)
  
  ::lifelong_backend::transform::proto::Vector3f* temp = translation_;
  translation_ = nullptr;
  return temp;
}
inline ::lifelong_backend::transform::proto::Vector3f* Transform3f::_internal_mutable_translation() {
  
  if (translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::lifelong_backend::transform::proto::Vector3f>(GetArena());
    translation_ = p;
  }
  return translation_;
}
inline ::lifelong_backend::transform::proto::Vector3f* Transform3f::mutable_translation() {
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3f.translation)
  return _internal_mutable_translation();
}
inline void Transform3f::set_allocated_translation(::lifelong_backend::transform::proto::Vector3f* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete translation_;
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(translation);
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3f.translation)
}

// .lifelong_backend.transform.proto.Quaternionf rotation = 2;
inline bool Transform3f::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform3f::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform3f::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::lifelong_backend::transform::proto::Quaternionf& Transform3f::_internal_rotation() const {
  const ::lifelong_backend::transform::proto::Quaternionf* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lifelong_backend::transform::proto::Quaternionf*>(
      &::lifelong_backend::transform::proto::_Quaternionf_default_instance_);
}
inline const ::lifelong_backend::transform::proto::Quaternionf& Transform3f::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3f.rotation)
  return _internal_rotation();
}
inline void Transform3f::unsafe_arena_set_allocated_rotation(
    ::lifelong_backend::transform::proto::Quaternionf* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lifelong_backend.transform.proto.Transform3f.rotation)
}
inline ::lifelong_backend::transform::proto::Quaternionf* Transform3f::release_rotation() {
  auto temp = unsafe_arena_release_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::lifelong_backend::transform::proto::Quaternionf* Transform3f::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3f.rotation)
  
  ::lifelong_backend::transform::proto::Quaternionf* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::lifelong_backend::transform::proto::Quaternionf* Transform3f::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::lifelong_backend::transform::proto::Quaternionf>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::lifelong_backend::transform::proto::Quaternionf* Transform3f::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3f.rotation)
  return _internal_mutable_rotation();
}
inline void Transform3f::set_allocated_rotation(::lifelong_backend::transform::proto::Quaternionf* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3f.rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace transform
}  // namespace lifelong_backend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transform_2eproto
