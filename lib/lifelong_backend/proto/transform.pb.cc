// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transform.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lifelong_backend {
namespace transform {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vector2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector4f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector4f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaterniond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaterniond_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quaternionf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quaternionf_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform2f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform2f_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Transform3f_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transform3f_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_transform_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_transform_2eproto() {
  protobuf_AddDesc_transform_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transform.proto");
  GOOGLE_CHECK(file != NULL);
  Vector2d_descriptor_ = file->message_type(0);
  static const int Vector2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, y_),
  };
  Vector2d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector2d_descriptor_,
      Vector2d::internal_default_instance(),
      Vector2d_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector2d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2d, _internal_metadata_));
  Vector2f_descriptor_ = file->message_type(1);
  static const int Vector2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, y_),
  };
  Vector2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector2f_descriptor_,
      Vector2f::internal_default_instance(),
      Vector2f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2f, _internal_metadata_));
  Vector3d_descriptor_ = file->message_type(2);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::internal_default_instance(),
      Vector3d_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _internal_metadata_));
  Vector3f_descriptor_ = file->message_type(3);
  static const int Vector3f_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, z_),
  };
  Vector3f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3f_descriptor_,
      Vector3f::internal_default_instance(),
      Vector3f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector3f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3f, _internal_metadata_));
  Vector4f_descriptor_ = file->message_type(4);
  static const int Vector4f_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4f, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4f, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4f, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4f, t_),
  };
  Vector4f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector4f_descriptor_,
      Vector4f::internal_default_instance(),
      Vector4f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vector4f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector4f, _internal_metadata_));
  Quaterniond_descriptor_ = file->message_type(5);
  static const int Quaterniond_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, w_),
  };
  Quaterniond_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quaterniond_descriptor_,
      Quaterniond::internal_default_instance(),
      Quaterniond_offsets_,
      -1,
      -1,
      -1,
      sizeof(Quaterniond),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaterniond, _internal_metadata_));
  Quaternionf_descriptor_ = file->message_type(6);
  static const int Quaternionf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, w_),
  };
  Quaternionf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Quaternionf_descriptor_,
      Quaternionf::internal_default_instance(),
      Quaternionf_offsets_,
      -1,
      -1,
      -1,
      sizeof(Quaternionf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quaternionf, _internal_metadata_));
  Transform2d_descriptor_ = file->message_type(7);
  static const int Transform2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2d, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2d, rotation_),
  };
  Transform2d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform2d_descriptor_,
      Transform2d::internal_default_instance(),
      Transform2d_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transform2d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2d, _internal_metadata_));
  Transform2f_descriptor_ = file->message_type(8);
  static const int Transform2f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2f, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2f, rotation_),
  };
  Transform2f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform2f_descriptor_,
      Transform2f::internal_default_instance(),
      Transform2f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transform2f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform2f, _internal_metadata_));
  Transform3d_descriptor_ = file->message_type(9);
  static const int Transform3d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform3d, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform3d, rotation_),
  };
  Transform3d_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform3d_descriptor_,
      Transform3d::internal_default_instance(),
      Transform3d_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transform3d),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform3d, _internal_metadata_));
  Transform3f_descriptor_ = file->message_type(10);
  static const int Transform3f_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform3f, translation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform3f, rotation_),
  };
  Transform3f_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Transform3f_descriptor_,
      Transform3f::internal_default_instance(),
      Transform3f_offsets_,
      -1,
      -1,
      -1,
      sizeof(Transform3f),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transform3f, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transform_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector2d_descriptor_, Vector2d::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector2f_descriptor_, Vector2f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3d_descriptor_, Vector3d::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3f_descriptor_, Vector3f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector4f_descriptor_, Vector4f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quaterniond_descriptor_, Quaterniond::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Quaternionf_descriptor_, Quaternionf::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform2d_descriptor_, Transform2d::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform2f_descriptor_, Transform2f::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform3d_descriptor_, Transform3d::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Transform3f_descriptor_, Transform3f::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transform_2eproto() {
  Vector2d_default_instance_.Shutdown();
  delete Vector2d_reflection_;
  Vector2f_default_instance_.Shutdown();
  delete Vector2f_reflection_;
  Vector3d_default_instance_.Shutdown();
  delete Vector3d_reflection_;
  Vector3f_default_instance_.Shutdown();
  delete Vector3f_reflection_;
  Vector4f_default_instance_.Shutdown();
  delete Vector4f_reflection_;
  Quaterniond_default_instance_.Shutdown();
  delete Quaterniond_reflection_;
  Quaternionf_default_instance_.Shutdown();
  delete Quaternionf_reflection_;
  Transform2d_default_instance_.Shutdown();
  delete Transform2d_reflection_;
  Transform2f_default_instance_.Shutdown();
  delete Transform2f_reflection_;
  Transform3d_default_instance_.Shutdown();
  delete Transform3d_reflection_;
  Transform3f_default_instance_.Shutdown();
  delete Transform3f_reflection_;
}

void protobuf_InitDefaults_transform_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Vector2d_default_instance_.DefaultConstruct();
  Vector2f_default_instance_.DefaultConstruct();
  Vector3d_default_instance_.DefaultConstruct();
  Vector3f_default_instance_.DefaultConstruct();
  Vector4f_default_instance_.DefaultConstruct();
  Quaterniond_default_instance_.DefaultConstruct();
  Quaternionf_default_instance_.DefaultConstruct();
  Transform2d_default_instance_.DefaultConstruct();
  Transform2f_default_instance_.DefaultConstruct();
  Transform3d_default_instance_.DefaultConstruct();
  Transform3f_default_instance_.DefaultConstruct();
  Vector2d_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector2f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector3d_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector3f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Vector4f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Quaterniond_default_instance_.get_mutable()->InitAsDefaultInstance();
  Quaternionf_default_instance_.get_mutable()->InitAsDefaultInstance();
  Transform2d_default_instance_.get_mutable()->InitAsDefaultInstance();
  Transform2f_default_instance_.get_mutable()->InitAsDefaultInstance();
  Transform3d_default_instance_.get_mutable()->InitAsDefaultInstance();
  Transform3f_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_transform_2eproto_once_);
void protobuf_InitDefaults_transform_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_transform_2eproto_once_,
                 &protobuf_InitDefaults_transform_2eproto_impl);
}
void protobuf_AddDesc_transform_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_transform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017transform.proto\022 lifelong_backend.tran"
    "sform.proto\" \n\010Vector2d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030"
    "\002 \001(\001\" \n\010Vector2f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\""
    "+\n\010Vector3d\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003"
    " \001(\001\"+\n\010Vector3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t"
    "\n\001z\030\003 \001(\002\"6\n\010Vector4f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
    "\001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001t\030\004 \001(\002\"9\n\013Quaterniond"
    "\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004"
    " \001(\001\"9\n\013Quaternionf\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
    "\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"`\n\013Transform2d\022\?"
    "\n\013translation\030\001 \001(\0132*.lifelong_backend.t"
    "ransform.proto.Vector2d\022\020\n\010rotation\030\002 \001("
    "\001\"`\n\013Transform2f\022\?\n\013translation\030\001 \001(\0132*."
    "lifelong_backend.transform.proto.Vector2"
    "f\022\020\n\010rotation\030\002 \001(\002\"\217\001\n\013Transform3d\022\?\n\013t"
    "ranslation\030\001 \001(\0132*.lifelong_backend.tran"
    "sform.proto.Vector3d\022\?\n\010rotation\030\002 \001(\0132-"
    ".lifelong_backend.transform.proto.Quater"
    "niond\"\217\001\n\013Transform3f\022\?\n\013translation\030\001 \001"
    "(\0132*.lifelong_backend.transform.proto.Ve"
    "ctor3f\022\?\n\010rotation\030\002 \001(\0132-.lifelong_back"
    "end.transform.proto.Quaternionfb\006proto3", 879);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transform.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transform_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_transform_2eproto_once_);
void protobuf_AddDesc_transform_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_transform_2eproto_once_,
                 &protobuf_AddDesc_transform_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transform_2eproto {
  StaticDescriptorInitializer_transform_2eproto() {
    protobuf_AddDesc_transform_2eproto();
  }
} static_descriptor_initializer_transform_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2d::kXFieldNumber;
const int Vector2d::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2d::Vector2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Vector2d)
}

void Vector2d::InitAsDefaultInstance() {
}

Vector2d::Vector2d(const Vector2d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Vector2d)
}

void Vector2d::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Vector2d)
  SharedDtor();
}

void Vector2d::SharedDtor() {
}

void Vector2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2d_descriptor_;
}

const Vector2d& Vector2d::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector2d> Vector2d_default_instance_;

Vector2d* Vector2d::New(::google::protobuf::Arena* arena) const {
  Vector2d* n = new Vector2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Vector2d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector2d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector2d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Vector2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Vector2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Vector2d)
  return false;
#undef DO_
}

void Vector2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Vector2d)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Vector2d)
}

::google::protobuf::uint8* Vector2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Vector2d)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Vector2d)
  return target;
}

size_t Vector2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Vector2d)
  size_t total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Vector2d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector2d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Vector2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Vector2d)
    UnsafeMergeFrom(*source);
  }
}

void Vector2d::MergeFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Vector2d)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector2d::UnsafeMergeFrom(const Vector2d& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Vector2d)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector2d::IsInitialized() const {

  return true;
}

void Vector2d::Swap(Vector2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2d::InternalSwap(Vector2d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2d_descriptor_;
  metadata.reflection = Vector2d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2d

// optional double x = 1;
void Vector2d::clear_x() {
  x_ = 0;
}
double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2d.x)
  return x_;
}
void Vector2d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2d.x)
}

// optional double y = 2;
void Vector2d::clear_y() {
  y_ = 0;
}
double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2d.y)
  return y_;
}
void Vector2d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2d.y)
}

inline const Vector2d* Vector2d::internal_default_instance() {
  return &Vector2d_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2f::kXFieldNumber;
const int Vector2f::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2f::Vector2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Vector2f)
}

void Vector2f::InitAsDefaultInstance() {
}

Vector2f::Vector2f(const Vector2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Vector2f)
}

void Vector2f::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  _cached_size_ = 0;
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Vector2f)
  SharedDtor();
}

void Vector2f::SharedDtor() {
}

void Vector2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2f_descriptor_;
}

const Vector2f& Vector2f::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector2f> Vector2f_default_instance_;

Vector2f* Vector2f::New(::google::protobuf::Arena* arena) const {
  Vector2f* n = new Vector2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Vector2f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector2f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector2f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Vector2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Vector2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Vector2f)
  return false;
#undef DO_
}

void Vector2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Vector2f)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Vector2f)
}

::google::protobuf::uint8* Vector2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Vector2f)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Vector2f)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Vector2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Vector2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Vector2f)
    UnsafeMergeFrom(*source);
  }
}

void Vector2f::MergeFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Vector2f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector2f::UnsafeMergeFrom(const Vector2f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Vector2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Vector2f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector2f::IsInitialized() const {

  return true;
}

void Vector2f::Swap(Vector2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2f::InternalSwap(Vector2f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2f_descriptor_;
  metadata.reflection = Vector2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2f

// optional float x = 1;
void Vector2f::clear_x() {
  x_ = 0;
}
float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2f.x)
  return x_;
}
void Vector2f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2f.x)
}

// optional float y = 2;
void Vector2f::clear_y() {
  y_ = 0;
}
float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector2f.y)
  return y_;
}
void Vector2f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector2f.y)
}

inline const Vector2f* Vector2f::internal_default_instance() {
  return &Vector2f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3d::Vector3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Vector3d)
}

void Vector3d::InitAsDefaultInstance() {
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Vector3d)
}

void Vector3d::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Vector3d)
  SharedDtor();
}

void Vector3d::SharedDtor() {
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector3d> Vector3d_default_instance_;

Vector3d* Vector3d::New(::google::protobuf::Arena* arena) const {
  Vector3d* n = new Vector3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Vector3d)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3d, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3d*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Vector3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Vector3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Vector3d)
  return false;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Vector3d)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Vector3d)
}

::google::protobuf::uint8* Vector3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Vector3d)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Vector3d)
  size_t total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Vector3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Vector3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Vector3d)
    UnsafeMergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Vector3d)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector3d::UnsafeMergeFrom(const Vector3d& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Vector3d)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector3d::IsInitialized() const {

  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3d::InternalSwap(Vector3d* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3d

// optional double x = 1;
void Vector3d::clear_x() {
  x_ = 0;
}
double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.x)
  return x_;
}
void Vector3d::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.x)
}

// optional double y = 2;
void Vector3d::clear_y() {
  y_ = 0;
}
double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.y)
  return y_;
}
void Vector3d::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.y)
}

// optional double z = 3;
void Vector3d::clear_z() {
  z_ = 0;
}
double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3d.z)
  return z_;
}
void Vector3d::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3d.z)
}

inline const Vector3d* Vector3d::internal_default_instance() {
  return &Vector3d_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3f::Vector3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Vector3f)
}

void Vector3f::InitAsDefaultInstance() {
}

Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Vector3f)
}

void Vector3f::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Vector3f)
  SharedDtor();
}

void Vector3f::SharedDtor() {
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3f_descriptor_;
}

const Vector3f& Vector3f::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector3f> Vector3f_default_instance_;

Vector3f* Vector3f::New(::google::protobuf::Arena* arena) const {
  Vector3f* n = new Vector3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Vector3f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Vector3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Vector3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Vector3f)
  return false;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Vector3f)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Vector3f)
}

::google::protobuf::uint8* Vector3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Vector3f)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Vector3f)
  return target;
}

size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Vector3f)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Vector3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Vector3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Vector3f)
    UnsafeMergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Vector3f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector3f::UnsafeMergeFrom(const Vector3f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Vector3f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector3f::IsInitialized() const {

  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3f::InternalSwap(Vector3f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3f_descriptor_;
  metadata.reflection = Vector3f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3f

// optional float x = 1;
void Vector3f::clear_x() {
  x_ = 0;
}
float Vector3f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.x)
  return x_;
}
void Vector3f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.x)
}

// optional float y = 2;
void Vector3f::clear_y() {
  y_ = 0;
}
float Vector3f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.y)
  return y_;
}
void Vector3f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.y)
}

// optional float z = 3;
void Vector3f::clear_z() {
  z_ = 0;
}
float Vector3f::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector3f.z)
  return z_;
}
void Vector3f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector3f.z)
}

inline const Vector3f* Vector3f::internal_default_instance() {
  return &Vector3f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector4f::kXFieldNumber;
const int Vector4f::kYFieldNumber;
const int Vector4f::kZFieldNumber;
const int Vector4f::kTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector4f::Vector4f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Vector4f)
}

void Vector4f::InitAsDefaultInstance() {
}

Vector4f::Vector4f(const Vector4f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Vector4f)
}

void Vector4f::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&x_) + sizeof(t_));
  _cached_size_ = 0;
}

Vector4f::~Vector4f() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Vector4f)
  SharedDtor();
}

void Vector4f::SharedDtor() {
}

void Vector4f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector4f_descriptor_;
}

const Vector4f& Vector4f::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vector4f> Vector4f_default_instance_;

Vector4f* Vector4f::New(::google::protobuf::Arena* arena) const {
  Vector4f* n = new Vector4f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector4f::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Vector4f)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector4f, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector4f*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, t_);

#undef ZR_HELPER_
#undef ZR_

}

bool Vector4f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Vector4f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_t;
        break;
      }

      // optional float t = 4;
      case 4: {
        if (tag == 37) {
         parse_t:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Vector4f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Vector4f)
  return false;
#undef DO_
}

void Vector4f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Vector4f)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float t = 4;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->t(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Vector4f)
}

::google::protobuf::uint8* Vector4f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Vector4f)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float t = 4;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->t(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Vector4f)
  return target;
}

size_t Vector4f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Vector4f)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float t = 4;
  if (this->t() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Vector4f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector4f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector4f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Vector4f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Vector4f)
    UnsafeMergeFrom(*source);
  }
}

void Vector4f::MergeFrom(const Vector4f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Vector4f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vector4f::UnsafeMergeFrom(const Vector4f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
}

void Vector4f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Vector4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4f::CopyFrom(const Vector4f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Vector4f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vector4f::IsInitialized() const {

  return true;
}

void Vector4f::Swap(Vector4f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector4f::InternalSwap(Vector4f* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(t_, other->t_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector4f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector4f_descriptor_;
  metadata.reflection = Vector4f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector4f

// optional float x = 1;
void Vector4f::clear_x() {
  x_ = 0;
}
float Vector4f::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.x)
  return x_;
}
void Vector4f::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.x)
}

// optional float y = 2;
void Vector4f::clear_y() {
  y_ = 0;
}
float Vector4f::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.y)
  return y_;
}
void Vector4f::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.y)
}

// optional float z = 3;
void Vector4f::clear_z() {
  z_ = 0;
}
float Vector4f::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.z)
  return z_;
}
void Vector4f::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.z)
}

// optional float t = 4;
void Vector4f::clear_t() {
  t_ = 0;
}
float Vector4f::t() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Vector4f.t)
  return t_;
}
void Vector4f::set_t(float value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Vector4f.t)
}

inline const Vector4f* Vector4f::internal_default_instance() {
  return &Vector4f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaterniond::kXFieldNumber;
const int Quaterniond::kYFieldNumber;
const int Quaterniond::kZFieldNumber;
const int Quaterniond::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaterniond::Quaterniond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Quaterniond)
}

void Quaterniond::InitAsDefaultInstance() {
}

Quaterniond::Quaterniond(const Quaterniond& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Quaterniond)
}

void Quaterniond::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
  _cached_size_ = 0;
}

Quaterniond::~Quaterniond() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Quaterniond)
  SharedDtor();
}

void Quaterniond::SharedDtor() {
}

void Quaterniond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaterniond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaterniond_descriptor_;
}

const Quaterniond& Quaterniond::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Quaterniond> Quaterniond_default_instance_;

Quaterniond* Quaterniond::New(::google::protobuf::Arena* arena) const {
  Quaterniond* n = new Quaterniond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaterniond::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Quaterniond)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Quaterniond, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Quaterniond*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Quaterniond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Quaterniond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }

      // optional double w = 4;
      case 4: {
        if (tag == 33) {
         parse_w:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Quaterniond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Quaterniond)
  return false;
#undef DO_
}

void Quaterniond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Quaterniond)
  // optional double x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Quaterniond)
}

::google::protobuf::uint8* Quaterniond::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Quaterniond)
  // optional double x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Quaterniond)
  return target;
}

size_t Quaterniond::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Quaterniond)
  size_t total_size = 0;

  // optional double x = 1;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // optional double y = 2;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // optional double z = 3;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // optional double w = 4;
  if (this->w() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaterniond::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Quaterniond)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Quaterniond* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaterniond>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Quaterniond)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Quaterniond)
    UnsafeMergeFrom(*source);
  }
}

void Quaterniond::MergeFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Quaterniond)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Quaterniond::UnsafeMergeFrom(const Quaterniond& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Quaterniond::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Quaterniond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaterniond::CopyFrom(const Quaterniond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Quaterniond)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Quaterniond::IsInitialized() const {

  return true;
}

void Quaterniond::Swap(Quaterniond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaterniond::InternalSwap(Quaterniond* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaterniond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaterniond_descriptor_;
  metadata.reflection = Quaterniond_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaterniond

// optional double x = 1;
void Quaterniond::clear_x() {
  x_ = 0;
}
double Quaterniond::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.x)
  return x_;
}
void Quaterniond::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.x)
}

// optional double y = 2;
void Quaterniond::clear_y() {
  y_ = 0;
}
double Quaterniond::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.y)
  return y_;
}
void Quaterniond::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.y)
}

// optional double z = 3;
void Quaterniond::clear_z() {
  z_ = 0;
}
double Quaterniond::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.z)
  return z_;
}
void Quaterniond::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.z)
}

// optional double w = 4;
void Quaterniond::clear_w() {
  w_ = 0;
}
double Quaterniond::w() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaterniond.w)
  return w_;
}
void Quaterniond::set_w(double value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaterniond.w)
}

inline const Quaterniond* Quaterniond::internal_default_instance() {
  return &Quaterniond_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternionf::kXFieldNumber;
const int Quaternionf::kYFieldNumber;
const int Quaternionf::kZFieldNumber;
const int Quaternionf::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternionf::Quaternionf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Quaternionf)
}

void Quaternionf::InitAsDefaultInstance() {
}

Quaternionf::Quaternionf(const Quaternionf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Quaternionf)
}

void Quaternionf::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_) + sizeof(w_));
  _cached_size_ = 0;
}

Quaternionf::~Quaternionf() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Quaternionf)
  SharedDtor();
}

void Quaternionf::SharedDtor() {
}

void Quaternionf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternionf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quaternionf_descriptor_;
}

const Quaternionf& Quaternionf::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Quaternionf> Quaternionf_default_instance_;

Quaternionf* Quaternionf::New(::google::protobuf::Arena* arena) const {
  Quaternionf* n = new Quaternionf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternionf::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Quaternionf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Quaternionf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Quaternionf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, w_);

#undef ZR_HELPER_
#undef ZR_

}

bool Quaternionf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Quaternionf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4;
      case 4: {
        if (tag == 37) {
         parse_w:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Quaternionf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Quaternionf)
  return false;
#undef DO_
}

void Quaternionf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Quaternionf)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Quaternionf)
}

::google::protobuf::uint8* Quaternionf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Quaternionf)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4;
  if (this->w() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Quaternionf)
  return target;
}

size_t Quaternionf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Quaternionf)
  size_t total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional float w = 4;
  if (this->w() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternionf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Quaternionf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Quaternionf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternionf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Quaternionf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Quaternionf)
    UnsafeMergeFrom(*source);
  }
}

void Quaternionf::MergeFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Quaternionf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Quaternionf::UnsafeMergeFrom(const Quaternionf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.w() != 0) {
    set_w(from.w());
  }
}

void Quaternionf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Quaternionf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternionf::CopyFrom(const Quaternionf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Quaternionf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Quaternionf::IsInitialized() const {

  return true;
}

void Quaternionf::Swap(Quaternionf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternionf::InternalSwap(Quaternionf* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(w_, other->w_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternionf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quaternionf_descriptor_;
  metadata.reflection = Quaternionf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternionf

// optional float x = 1;
void Quaternionf::clear_x() {
  x_ = 0;
}
float Quaternionf::x() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.x)
  return x_;
}
void Quaternionf::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.x)
}

// optional float y = 2;
void Quaternionf::clear_y() {
  y_ = 0;
}
float Quaternionf::y() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.y)
  return y_;
}
void Quaternionf::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.y)
}

// optional float z = 3;
void Quaternionf::clear_z() {
  z_ = 0;
}
float Quaternionf::z() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.z)
  return z_;
}
void Quaternionf::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.z)
}

// optional float w = 4;
void Quaternionf::clear_w() {
  w_ = 0;
}
float Quaternionf::w() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Quaternionf.w)
  return w_;
}
void Quaternionf::set_w(float value) {
  
  w_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Quaternionf.w)
}

inline const Quaternionf* Quaternionf::internal_default_instance() {
  return &Quaternionf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform2d::kTranslationFieldNumber;
const int Transform2d::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform2d::Transform2d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Transform2d)
}

void Transform2d::InitAsDefaultInstance() {
  translation_ = const_cast< ::lifelong_backend::transform::proto::Vector2d*>(
      ::lifelong_backend::transform::proto::Vector2d::internal_default_instance());
}

Transform2d::Transform2d(const Transform2d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Transform2d)
}

void Transform2d::SharedCtor() {
  translation_ = NULL;
  rotation_ = 0;
  _cached_size_ = 0;
}

Transform2d::~Transform2d() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Transform2d)
  SharedDtor();
}

void Transform2d::SharedDtor() {
  if (this != &Transform2d_default_instance_.get()) {
    delete translation_;
  }
}

void Transform2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform2d_descriptor_;
}

const Transform2d& Transform2d::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Transform2d> Transform2d_default_instance_;

Transform2d* Transform2d::New(::google::protobuf::Arena* arena) const {
  Transform2d* n = new Transform2d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform2d::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Transform2d)
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
  rotation_ = 0;
}

bool Transform2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Transform2d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lifelong_backend.transform.proto.Vector2d translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rotation;
        break;
      }

      // optional double rotation = 2;
      case 2: {
        if (tag == 17) {
         parse_rotation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Transform2d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Transform2d)
  return false;
#undef DO_
}

void Transform2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Transform2d)
  // optional .lifelong_backend.transform.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rotation(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Transform2d)
}

::google::protobuf::uint8* Transform2d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Transform2d)
  // optional .lifelong_backend.transform.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, false, target);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rotation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Transform2d)
  return target;
}

size_t Transform2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Transform2d)
  size_t total_size = 0;

  // optional .lifelong_backend.transform.proto.Vector2d translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform2d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Transform2d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transform2d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform2d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Transform2d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Transform2d)
    UnsafeMergeFrom(*source);
  }
}

void Transform2d::MergeFrom(const Transform2d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Transform2d)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Transform2d::UnsafeMergeFrom(const Transform2d& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_translation()) {
    mutable_translation()->::lifelong_backend::transform::proto::Vector2d::MergeFrom(from.translation());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void Transform2d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Transform2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform2d::CopyFrom(const Transform2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Transform2d)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Transform2d::IsInitialized() const {

  return true;
}

void Transform2d::Swap(Transform2d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform2d::InternalSwap(Transform2d* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform2d_descriptor_;
  metadata.reflection = Transform2d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform2d

// optional .lifelong_backend.transform.proto.Vector2d translation = 1;
bool Transform2d::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
void Transform2d::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
const ::lifelong_backend::transform::proto::Vector2d& Transform2d::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2d.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector2d::internal_default_instance();
}
::lifelong_backend::transform::proto::Vector2d* Transform2d::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector2d;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform2d.translation)
  return translation_;
}
::lifelong_backend::transform::proto::Vector2d* Transform2d::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform2d.translation)
  
  ::lifelong_backend::transform::proto::Vector2d* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform2d::set_allocated_translation(::lifelong_backend::transform::proto::Vector2d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform2d.translation)
}

// optional double rotation = 2;
void Transform2d::clear_rotation() {
  rotation_ = 0;
}
double Transform2d::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2d.rotation)
  return rotation_;
}
void Transform2d::set_rotation(double value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Transform2d.rotation)
}

inline const Transform2d* Transform2d::internal_default_instance() {
  return &Transform2d_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform2f::kTranslationFieldNumber;
const int Transform2f::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform2f::Transform2f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Transform2f)
}

void Transform2f::InitAsDefaultInstance() {
  translation_ = const_cast< ::lifelong_backend::transform::proto::Vector2f*>(
      ::lifelong_backend::transform::proto::Vector2f::internal_default_instance());
}

Transform2f::Transform2f(const Transform2f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Transform2f)
}

void Transform2f::SharedCtor() {
  translation_ = NULL;
  rotation_ = 0;
  _cached_size_ = 0;
}

Transform2f::~Transform2f() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Transform2f)
  SharedDtor();
}

void Transform2f::SharedDtor() {
  if (this != &Transform2f_default_instance_.get()) {
    delete translation_;
  }
}

void Transform2f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform2f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform2f_descriptor_;
}

const Transform2f& Transform2f::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Transform2f> Transform2f_default_instance_;

Transform2f* Transform2f::New(::google::protobuf::Arena* arena) const {
  Transform2f* n = new Transform2f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform2f::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Transform2f)
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
  rotation_ = 0;
}

bool Transform2f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Transform2f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lifelong_backend.transform.proto.Vector2f translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_rotation;
        break;
      }

      // optional float rotation = 2;
      case 2: {
        if (tag == 21) {
         parse_rotation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Transform2f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Transform2f)
  return false;
#undef DO_
}

void Transform2f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Transform2f)
  // optional .lifelong_backend.transform.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // optional float rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->rotation(), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Transform2f)
}

::google::protobuf::uint8* Transform2f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Transform2f)
  // optional .lifelong_backend.transform.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, false, target);
  }

  // optional float rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->rotation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Transform2f)
  return target;
}

size_t Transform2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Transform2f)
  size_t total_size = 0;

  // optional .lifelong_backend.transform.proto.Vector2f translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  // optional float rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform2f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Transform2f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transform2f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform2f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Transform2f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Transform2f)
    UnsafeMergeFrom(*source);
  }
}

void Transform2f::MergeFrom(const Transform2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Transform2f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Transform2f::UnsafeMergeFrom(const Transform2f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_translation()) {
    mutable_translation()->::lifelong_backend::transform::proto::Vector2f::MergeFrom(from.translation());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void Transform2f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Transform2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform2f::CopyFrom(const Transform2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Transform2f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Transform2f::IsInitialized() const {

  return true;
}

void Transform2f::Swap(Transform2f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform2f::InternalSwap(Transform2f* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform2f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform2f_descriptor_;
  metadata.reflection = Transform2f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform2f

// optional .lifelong_backend.transform.proto.Vector2f translation = 1;
bool Transform2f::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
void Transform2f::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
const ::lifelong_backend::transform::proto::Vector2f& Transform2f::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2f.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector2f::internal_default_instance();
}
::lifelong_backend::transform::proto::Vector2f* Transform2f::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform2f.translation)
  return translation_;
}
::lifelong_backend::transform::proto::Vector2f* Transform2f::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform2f.translation)
  
  ::lifelong_backend::transform::proto::Vector2f* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform2f::set_allocated_translation(::lifelong_backend::transform::proto::Vector2f* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform2f.translation)
}

// optional float rotation = 2;
void Transform2f::clear_rotation() {
  rotation_ = 0;
}
float Transform2f::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform2f.rotation)
  return rotation_;
}
void Transform2f::set_rotation(float value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.transform.proto.Transform2f.rotation)
}

inline const Transform2f* Transform2f::internal_default_instance() {
  return &Transform2f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform3d::kTranslationFieldNumber;
const int Transform3d::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform3d::Transform3d()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Transform3d)
}

void Transform3d::InitAsDefaultInstance() {
  translation_ = const_cast< ::lifelong_backend::transform::proto::Vector3d*>(
      ::lifelong_backend::transform::proto::Vector3d::internal_default_instance());
  rotation_ = const_cast< ::lifelong_backend::transform::proto::Quaterniond*>(
      ::lifelong_backend::transform::proto::Quaterniond::internal_default_instance());
}

Transform3d::Transform3d(const Transform3d& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Transform3d)
}

void Transform3d::SharedCtor() {
  translation_ = NULL;
  rotation_ = NULL;
  _cached_size_ = 0;
}

Transform3d::~Transform3d() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Transform3d)
  SharedDtor();
}

void Transform3d::SharedDtor() {
  if (this != &Transform3d_default_instance_.get()) {
    delete translation_;
    delete rotation_;
  }
}

void Transform3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform3d_descriptor_;
}

const Transform3d& Transform3d::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Transform3d> Transform3d_default_instance_;

Transform3d* Transform3d::New(::google::protobuf::Arena* arena) const {
  Transform3d* n = new Transform3d;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform3d::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Transform3d)
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}

bool Transform3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Transform3d)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lifelong_backend.transform.proto.Vector3d translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // optional .lifelong_backend.transform.proto.Quaterniond rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Transform3d)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Transform3d)
  return false;
#undef DO_
}

void Transform3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Transform3d)
  // optional .lifelong_backend.transform.proto.Vector3d translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // optional .lifelong_backend.transform.proto.Quaterniond rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Transform3d)
}

::google::protobuf::uint8* Transform3d::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Transform3d)
  // optional .lifelong_backend.transform.proto.Vector3d translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, false, target);
  }

  // optional .lifelong_backend.transform.proto.Quaterniond rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rotation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Transform3d)
  return target;
}

size_t Transform3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Transform3d)
  size_t total_size = 0;

  // optional .lifelong_backend.transform.proto.Vector3d translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  // optional .lifelong_backend.transform.proto.Quaterniond rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform3d::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Transform3d)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transform3d* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform3d>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Transform3d)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Transform3d)
    UnsafeMergeFrom(*source);
  }
}

void Transform3d::MergeFrom(const Transform3d& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Transform3d)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Transform3d::UnsafeMergeFrom(const Transform3d& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_translation()) {
    mutable_translation()->::lifelong_backend::transform::proto::Vector3d::MergeFrom(from.translation());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::lifelong_backend::transform::proto::Quaterniond::MergeFrom(from.rotation());
  }
}

void Transform3d::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Transform3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform3d::CopyFrom(const Transform3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Transform3d)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Transform3d::IsInitialized() const {

  return true;
}

void Transform3d::Swap(Transform3d* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform3d::InternalSwap(Transform3d* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform3d_descriptor_;
  metadata.reflection = Transform3d_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform3d

// optional .lifelong_backend.transform.proto.Vector3d translation = 1;
bool Transform3d::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
void Transform3d::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
const ::lifelong_backend::transform::proto::Vector3d& Transform3d::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3d.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector3d::internal_default_instance();
}
::lifelong_backend::transform::proto::Vector3d* Transform3d::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector3d;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3d.translation)
  return translation_;
}
::lifelong_backend::transform::proto::Vector3d* Transform3d::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3d.translation)
  
  ::lifelong_backend::transform::proto::Vector3d* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform3d::set_allocated_translation(::lifelong_backend::transform::proto::Vector3d* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3d.translation)
}

// optional .lifelong_backend.transform.proto.Quaterniond rotation = 2;
bool Transform3d::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void Transform3d::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::lifelong_backend::transform::proto::Quaterniond& Transform3d::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3d.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::lifelong_backend::transform::proto::Quaterniond::internal_default_instance();
}
::lifelong_backend::transform::proto::Quaterniond* Transform3d::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::lifelong_backend::transform::proto::Quaterniond;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3d.rotation)
  return rotation_;
}
::lifelong_backend::transform::proto::Quaterniond* Transform3d::release_rotation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3d.rotation)
  
  ::lifelong_backend::transform::proto::Quaterniond* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Transform3d::set_allocated_rotation(::lifelong_backend::transform::proto::Quaterniond* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3d.rotation)
}

inline const Transform3d* Transform3d::internal_default_instance() {
  return &Transform3d_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transform3f::kTranslationFieldNumber;
const int Transform3f::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transform3f::Transform3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_transform_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.transform.proto.Transform3f)
}

void Transform3f::InitAsDefaultInstance() {
  translation_ = const_cast< ::lifelong_backend::transform::proto::Vector3f*>(
      ::lifelong_backend::transform::proto::Vector3f::internal_default_instance());
  rotation_ = const_cast< ::lifelong_backend::transform::proto::Quaternionf*>(
      ::lifelong_backend::transform::proto::Quaternionf::internal_default_instance());
}

Transform3f::Transform3f(const Transform3f& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.transform.proto.Transform3f)
}

void Transform3f::SharedCtor() {
  translation_ = NULL;
  rotation_ = NULL;
  _cached_size_ = 0;
}

Transform3f::~Transform3f() {
  // @@protoc_insertion_point(destructor:lifelong_backend.transform.proto.Transform3f)
  SharedDtor();
}

void Transform3f::SharedDtor() {
  if (this != &Transform3f_default_instance_.get()) {
    delete translation_;
    delete rotation_;
  }
}

void Transform3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transform3f::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transform3f_descriptor_;
}

const Transform3f& Transform3f::default_instance() {
  protobuf_InitDefaults_transform_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Transform3f> Transform3f_default_instance_;

Transform3f* Transform3f::New(::google::protobuf::Arena* arena) const {
  Transform3f* n = new Transform3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transform3f::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.transform.proto.Transform3f)
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}

bool Transform3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.transform.proto.Transform3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lifelong_backend.transform.proto.Vector3f translation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rotation;
        break;
      }

      // optional .lifelong_backend.transform.proto.Quaternionf rotation = 2;
      case 2: {
        if (tag == 18) {
         parse_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.transform.proto.Transform3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.transform.proto.Transform3f)
  return false;
#undef DO_
}

void Transform3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.transform.proto.Transform3f)
  // optional .lifelong_backend.transform.proto.Vector3f translation = 1;
  if (this->has_translation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->translation_, output);
  }

  // optional .lifelong_backend.transform.proto.Quaternionf rotation = 2;
  if (this->has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->rotation_, output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.transform.proto.Transform3f)
}

::google::protobuf::uint8* Transform3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.transform.proto.Transform3f)
  // optional .lifelong_backend.transform.proto.Vector3f translation = 1;
  if (this->has_translation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->translation_, false, target);
  }

  // optional .lifelong_backend.transform.proto.Quaternionf rotation = 2;
  if (this->has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->rotation_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.transform.proto.Transform3f)
  return target;
}

size_t Transform3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.transform.proto.Transform3f)
  size_t total_size = 0;

  // optional .lifelong_backend.transform.proto.Vector3f translation = 1;
  if (this->has_translation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->translation_);
  }

  // optional .lifelong_backend.transform.proto.Quaternionf rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rotation_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transform3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.transform.proto.Transform3f)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Transform3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transform3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.transform.proto.Transform3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.transform.proto.Transform3f)
    UnsafeMergeFrom(*source);
  }
}

void Transform3f::MergeFrom(const Transform3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.transform.proto.Transform3f)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Transform3f::UnsafeMergeFrom(const Transform3f& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_translation()) {
    mutable_translation()->::lifelong_backend::transform::proto::Vector3f::MergeFrom(from.translation());
  }
  if (from.has_rotation()) {
    mutable_rotation()->::lifelong_backend::transform::proto::Quaternionf::MergeFrom(from.rotation());
  }
}

void Transform3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.transform.proto.Transform3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform3f::CopyFrom(const Transform3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.transform.proto.Transform3f)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Transform3f::IsInitialized() const {

  return true;
}

void Transform3f::Swap(Transform3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transform3f::InternalSwap(Transform3f* other) {
  std::swap(translation_, other->translation_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transform3f::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transform3f_descriptor_;
  metadata.reflection = Transform3f_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transform3f

// optional .lifelong_backend.transform.proto.Vector3f translation = 1;
bool Transform3f::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
void Transform3f::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
const ::lifelong_backend::transform::proto::Vector3f& Transform3f::translation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3f.translation)
  return translation_ != NULL ? *translation_
                         : *::lifelong_backend::transform::proto::Vector3f::internal_default_instance();
}
::lifelong_backend::transform::proto::Vector3f* Transform3f::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::lifelong_backend::transform::proto::Vector3f;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3f.translation)
  return translation_;
}
::lifelong_backend::transform::proto::Vector3f* Transform3f::release_translation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3f.translation)
  
  ::lifelong_backend::transform::proto::Vector3f* temp = translation_;
  translation_ = NULL;
  return temp;
}
void Transform3f::set_allocated_translation(::lifelong_backend::transform::proto::Vector3f* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3f.translation)
}

// optional .lifelong_backend.transform.proto.Quaternionf rotation = 2;
bool Transform3f::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
void Transform3f::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
const ::lifelong_backend::transform::proto::Quaternionf& Transform3f::rotation() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.transform.proto.Transform3f.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::lifelong_backend::transform::proto::Quaternionf::internal_default_instance();
}
::lifelong_backend::transform::proto::Quaternionf* Transform3f::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::lifelong_backend::transform::proto::Quaternionf;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.transform.proto.Transform3f.rotation)
  return rotation_;
}
::lifelong_backend::transform::proto::Quaternionf* Transform3f::release_rotation() {
  // @@protoc_insertion_point(field_release:lifelong_backend.transform.proto.Transform3f.rotation)
  
  ::lifelong_backend::transform::proto::Quaternionf* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
void Transform3f::set_allocated_rotation(::lifelong_backend::transform::proto::Quaternionf* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.transform.proto.Transform3f.rotation)
}

inline const Transform3f* Transform3f::internal_default_instance() {
  return &Transform3f_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace transform
}  // namespace lifelong_backend

// @@protoc_insertion_point(global_scope)
