// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef PROTOBUF_graph_2eproto__INCLUDED
#define PROTOBUF_graph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "transform.pb.h"
// @@protoc_insertion_point(includes)

namespace lifelong_backend {
namespace graph {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_graph_2eproto();
void protobuf_InitDefaults_graph_2eproto();
void protobuf_AssignDesc_graph_2eproto();
void protobuf_ShutdownFile_graph_2eproto();

class Edge;
class Vertex;

// ===================================================================

class Vertex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.graph.proto.Vertex) */ {
 public:
  Vertex();
  virtual ~Vertex();

  Vertex(const Vertex& from);

  inline Vertex& operator=(const Vertex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vertex& default_instance();

  static const Vertex* internal_default_instance();

  void Swap(Vertex* other);

  // implements Message ----------------------------------------------

  inline Vertex* New() const { return New(NULL); }

  Vertex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vertex& from);
  void MergeFrom(const Vertex& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vertex* other);
  void UnsafeMergeFrom(const Vertex& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 traj = 1;
  void clear_traj();
  static const int kTrajFieldNumber = 1;
  ::google::protobuf::uint32 traj() const;
  void set_traj(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .lifelong_backend.transform.proto.Transform3d pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::lifelong_backend::transform::proto::Transform3d& pose() const;
  ::lifelong_backend::transform::proto::Transform3d* mutable_pose();
  ::lifelong_backend::transform::proto::Transform3d* release_pose();
  void set_allocated_pose(::lifelong_backend::transform::proto::Transform3d* pose);

  // @@protoc_insertion_point(class_scope:lifelong_backend.graph.proto.Vertex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::lifelong_backend::transform::proto::Transform3d* pose_;
  ::google::protobuf::uint32 traj_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_graph_2eproto_impl();
  friend void  protobuf_AddDesc_graph_2eproto_impl();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Vertex> Vertex_default_instance_;

// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:lifelong_backend.graph.proto.Edge) */ {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();

  static const Edge* internal_default_instance();

  void Swap(Edge* other);

  // implements Message ----------------------------------------------

  inline Edge* New() const { return New(NULL); }

  Edge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Edge* other);
  void UnsafeMergeFrom(const Edge& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 traj = 1;
  void clear_traj();
  static const int kTrajFieldNumber = 1;
  ::google::protobuf::uint32 traj() const;
  void set_traj(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional uint32 link_head = 3;
  void clear_link_head();
  static const int kLinkHeadFieldNumber = 3;
  ::google::protobuf::uint32 link_head() const;
  void set_link_head(::google::protobuf::uint32 value);

  // optional uint32 link_tail = 4;
  void clear_link_tail();
  static const int kLinkTailFieldNumber = 4;
  ::google::protobuf::uint32 link_tail() const;
  void set_link_tail(::google::protobuf::uint32 value);

  // optional .lifelong_backend.transform.proto.Transform3d constraint = 5;
  bool has_constraint() const;
  void clear_constraint();
  static const int kConstraintFieldNumber = 5;
  const ::lifelong_backend::transform::proto::Transform3d& constraint() const;
  ::lifelong_backend::transform::proto::Transform3d* mutable_constraint();
  ::lifelong_backend::transform::proto::Transform3d* release_constraint();
  void set_allocated_constraint(::lifelong_backend::transform::proto::Transform3d* constraint);

  // repeated double noise = 6;
  int noise_size() const;
  void clear_noise();
  static const int kNoiseFieldNumber = 6;
  double noise(int index) const;
  void set_noise(int index, double value);
  void add_noise(double value);
  const ::google::protobuf::RepeatedField< double >&
      noise() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_noise();

  // @@protoc_insertion_point(class_scope:lifelong_backend.graph.proto.Edge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > noise_;
  mutable int _noise_cached_byte_size_;
  ::lifelong_backend::transform::proto::Transform3d* constraint_;
  ::google::protobuf::uint32 traj_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 link_head_;
  ::google::protobuf::uint32 link_tail_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_graph_2eproto_impl();
  friend void  protobuf_AddDesc_graph_2eproto_impl();
  friend void protobuf_AssignDesc_graph_2eproto();
  friend void protobuf_ShutdownFile_graph_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Edge> Edge_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vertex

// optional uint32 traj = 1;
inline void Vertex::clear_traj() {
  traj_ = 0u;
}
inline ::google::protobuf::uint32 Vertex::traj() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.traj)
  return traj_;
}
inline void Vertex::set_traj(::google::protobuf::uint32 value) {
  
  traj_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.traj)
}

// optional uint32 id = 2;
inline void Vertex::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Vertex::id() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.id)
  return id_;
}
inline void Vertex::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.id)
}

// optional .lifelong_backend.transform.proto.Transform3d pose = 3;
inline bool Vertex::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void Vertex::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Transform3d& Vertex::pose() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.pose)
  return pose_ != NULL ? *pose_
                         : *::lifelong_backend::transform::proto::Transform3d::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Transform3d* Vertex::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::lifelong_backend::transform::proto::Transform3d;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.graph.proto.Vertex.pose)
  return pose_;
}
inline ::lifelong_backend::transform::proto::Transform3d* Vertex::release_pose() {
  // @@protoc_insertion_point(field_release:lifelong_backend.graph.proto.Vertex.pose)
  
  ::lifelong_backend::transform::proto::Transform3d* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Vertex::set_allocated_pose(::lifelong_backend::transform::proto::Transform3d* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.graph.proto.Vertex.pose)
}

inline const Vertex* Vertex::internal_default_instance() {
  return &Vertex_default_instance_.get();
}
// -------------------------------------------------------------------

// Edge

// optional uint32 traj = 1;
inline void Edge::clear_traj() {
  traj_ = 0u;
}
inline ::google::protobuf::uint32 Edge::traj() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.traj)
  return traj_;
}
inline void Edge::set_traj(::google::protobuf::uint32 value) {
  
  traj_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.traj)
}

// optional uint32 id = 2;
inline void Edge::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Edge::id() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.id)
  return id_;
}
inline void Edge::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.id)
}

// optional uint32 link_head = 3;
inline void Edge::clear_link_head() {
  link_head_ = 0u;
}
inline ::google::protobuf::uint32 Edge::link_head() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.link_head)
  return link_head_;
}
inline void Edge::set_link_head(::google::protobuf::uint32 value) {
  
  link_head_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.link_head)
}

// optional uint32 link_tail = 4;
inline void Edge::clear_link_tail() {
  link_tail_ = 0u;
}
inline ::google::protobuf::uint32 Edge::link_tail() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.link_tail)
  return link_tail_;
}
inline void Edge::set_link_tail(::google::protobuf::uint32 value) {
  
  link_tail_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.link_tail)
}

// optional .lifelong_backend.transform.proto.Transform3d constraint = 5;
inline bool Edge::has_constraint() const {
  return this != internal_default_instance() && constraint_ != NULL;
}
inline void Edge::clear_constraint() {
  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) delete constraint_;
  constraint_ = NULL;
}
inline const ::lifelong_backend::transform::proto::Transform3d& Edge::constraint() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.constraint)
  return constraint_ != NULL ? *constraint_
                         : *::lifelong_backend::transform::proto::Transform3d::internal_default_instance();
}
inline ::lifelong_backend::transform::proto::Transform3d* Edge::mutable_constraint() {
  
  if (constraint_ == NULL) {
    constraint_ = new ::lifelong_backend::transform::proto::Transform3d;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.graph.proto.Edge.constraint)
  return constraint_;
}
inline ::lifelong_backend::transform::proto::Transform3d* Edge::release_constraint() {
  // @@protoc_insertion_point(field_release:lifelong_backend.graph.proto.Edge.constraint)
  
  ::lifelong_backend::transform::proto::Transform3d* temp = constraint_;
  constraint_ = NULL;
  return temp;
}
inline void Edge::set_allocated_constraint(::lifelong_backend::transform::proto::Transform3d* constraint) {
  delete constraint_;
  constraint_ = constraint;
  if (constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.graph.proto.Edge.constraint)
}

// repeated double noise = 6;
inline int Edge::noise_size() const {
  return noise_.size();
}
inline void Edge::clear_noise() {
  noise_.Clear();
}
inline double Edge::noise(int index) const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.noise)
  return noise_.Get(index);
}
inline void Edge::set_noise(int index, double value) {
  noise_.Set(index, value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.noise)
}
inline void Edge::add_noise(double value) {
  noise_.Add(value);
  // @@protoc_insertion_point(field_add:lifelong_backend.graph.proto.Edge.noise)
}
inline const ::google::protobuf::RepeatedField< double >&
Edge::noise() const {
  // @@protoc_insertion_point(field_list:lifelong_backend.graph.proto.Edge.noise)
  return noise_;
}
inline ::google::protobuf::RepeatedField< double >*
Edge::mutable_noise() {
  // @@protoc_insertion_point(field_mutable_list:lifelong_backend.graph.proto.Edge.noise)
  return &noise_;
}

inline const Edge* Edge::internal_default_instance() {
  return &Edge_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace graph
}  // namespace lifelong_backend

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_graph_2eproto__INCLUDED
