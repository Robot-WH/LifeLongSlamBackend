// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lifelong_backend {
namespace graph {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Edge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Edge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_graph_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_graph_2eproto() {
  protobuf_AddDesc_graph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "graph.proto");
  GOOGLE_CHECK(file != NULL);
  Vertex_descriptor_ = file->message_type(0);
  static const int Vertex_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, traj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, pose_),
  };
  Vertex_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vertex_descriptor_,
      Vertex::internal_default_instance(),
      Vertex_offsets_,
      -1,
      -1,
      -1,
      sizeof(Vertex),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _internal_metadata_));
  Edge_descriptor_ = file->message_type(1);
  static const int Edge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, traj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, link_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, link_tail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, constraint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, noise_),
  };
  Edge_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Edge_descriptor_,
      Edge::internal_default_instance(),
      Edge_offsets_,
      -1,
      -1,
      -1,
      sizeof(Edge),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_graph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vertex_descriptor_, Vertex::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Edge_descriptor_, Edge::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_graph_2eproto() {
  Vertex_default_instance_.Shutdown();
  delete Vertex_reflection_;
  Edge_default_instance_.Shutdown();
  delete Edge_reflection_;
}

void protobuf_InitDefaults_graph_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lifelong_backend::transform::proto::protobuf_InitDefaults_transform_2eproto();
  Vertex_default_instance_.DefaultConstruct();
  Edge_default_instance_.DefaultConstruct();
  Vertex_default_instance_.get_mutable()->InitAsDefaultInstance();
  Edge_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_graph_2eproto_once_);
void protobuf_InitDefaults_graph_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_graph_2eproto_once_,
                 &protobuf_InitDefaults_graph_2eproto_impl);
}
void protobuf_AddDesc_graph_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_graph_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013graph.proto\022\034lifelong_backend.graph.pr"
    "oto\032\017transform.proto\"0\n\006Vertex\022\014\n\004traj\030\001"
    " \001(\r\022\n\n\002id\030\002 \001(\r\022\014\n\004pose\030\003 \003(\001\"\230\001\n\004Edge\022"
    "\014\n\004traj\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\022\021\n\tlink_head\030\003"
    " \001(\r\022\021\n\tlink_tail\030\004 \001(\r\022A\n\nconstraint\030\005 "
    "\001(\0132-.lifelong_backend.transform.proto.T"
    "ransform3d\022\r\n\005noise\030\006 \003(\001b\006proto3", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "graph.proto", &protobuf_RegisterTypes);
  ::lifelong_backend::transform::proto::protobuf_AddDesc_transform_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_graph_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_graph_2eproto_once_);
void protobuf_AddDesc_graph_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_graph_2eproto_once_,
                 &protobuf_AddDesc_graph_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_graph_2eproto {
  StaticDescriptorInitializer_graph_2eproto() {
    protobuf_AddDesc_graph_2eproto();
  }
} static_descriptor_initializer_graph_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vertex::kTrajFieldNumber;
const int Vertex::kIdFieldNumber;
const int Vertex::kPoseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vertex::Vertex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_graph_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.graph.proto.Vertex)
}

void Vertex::InitAsDefaultInstance() {
}

Vertex::Vertex(const Vertex& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.graph.proto.Vertex)
}

void Vertex::SharedCtor() {
  ::memset(&traj_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&traj_) + sizeof(id_));
  _cached_size_ = 0;
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:lifelong_backend.graph.proto.Vertex)
  SharedDtor();
}

void Vertex::SharedDtor() {
}

void Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vertex_descriptor_;
}

const Vertex& Vertex::default_instance() {
  protobuf_InitDefaults_graph_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Vertex> Vertex_default_instance_;

Vertex* Vertex::New(::google::protobuf::Arena* arena) const {
  Vertex* n = new Vertex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.graph.proto.Vertex)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vertex, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vertex*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(traj_, id_);

#undef ZR_HELPER_
#undef ZR_

  pose_.Clear();
}

bool Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.graph.proto.Vertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 traj = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &traj_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pose;
        break;
      }

      // repeated double pose = 3;
      case 3: {
        if (tag == 26) {
         parse_pose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pose())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_pose())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.graph.proto.Vertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.graph.proto.Vertex)
  return false;
#undef DO_
}

void Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.graph.proto.Vertex)
  // optional uint32 traj = 1;
  if (this->traj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->traj(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // repeated double pose = 3;
  if (this->pose_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_pose_cached_byte_size_);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->pose(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.graph.proto.Vertex)
}

::google::protobuf::uint8* Vertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.graph.proto.Vertex)
  // optional uint32 traj = 1;
  if (this->traj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->traj(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // repeated double pose = 3;
  if (this->pose_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _pose_cached_byte_size_, target);
  }
  for (int i = 0; i < this->pose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->pose(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.graph.proto.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.graph.proto.Vertex)
  size_t total_size = 0;

  // optional uint32 traj = 1;
  if (this->traj() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->traj());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // repeated double pose = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->pose_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _pose_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.graph.proto.Vertex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vertex* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vertex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.graph.proto.Vertex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.graph.proto.Vertex)
    UnsafeMergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.graph.proto.Vertex)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Vertex::UnsafeMergeFrom(const Vertex& from) {
  GOOGLE_DCHECK(&from != this);
  pose_.UnsafeMergeFrom(from.pose_);
  if (from.traj() != 0) {
    set_traj(from.traj());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Vertex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.graph.proto.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.graph.proto.Vertex)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Vertex::IsInitialized() const {

  return true;
}

void Vertex::Swap(Vertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vertex::InternalSwap(Vertex* other) {
  std::swap(traj_, other->traj_);
  std::swap(id_, other->id_);
  pose_.UnsafeArenaSwap(&other->pose_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vertex_descriptor_;
  metadata.reflection = Vertex_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vertex

// optional uint32 traj = 1;
void Vertex::clear_traj() {
  traj_ = 0u;
}
::google::protobuf::uint32 Vertex::traj() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.traj)
  return traj_;
}
void Vertex::set_traj(::google::protobuf::uint32 value) {
  
  traj_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.traj)
}

// optional uint32 id = 2;
void Vertex::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 Vertex::id() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.id)
  return id_;
}
void Vertex::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.id)
}

// repeated double pose = 3;
int Vertex::pose_size() const {
  return pose_.size();
}
void Vertex::clear_pose() {
  pose_.Clear();
}
double Vertex::pose(int index) const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Vertex.pose)
  return pose_.Get(index);
}
void Vertex::set_pose(int index, double value) {
  pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Vertex.pose)
}
void Vertex::add_pose(double value) {
  pose_.Add(value);
  // @@protoc_insertion_point(field_add:lifelong_backend.graph.proto.Vertex.pose)
}
const ::google::protobuf::RepeatedField< double >&
Vertex::pose() const {
  // @@protoc_insertion_point(field_list:lifelong_backend.graph.proto.Vertex.pose)
  return pose_;
}
::google::protobuf::RepeatedField< double >*
Vertex::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:lifelong_backend.graph.proto.Vertex.pose)
  return &pose_;
}

inline const Vertex* Vertex::internal_default_instance() {
  return &Vertex_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kTrajFieldNumber;
const int Edge::kIdFieldNumber;
const int Edge::kLinkHeadFieldNumber;
const int Edge::kLinkTailFieldNumber;
const int Edge::kConstraintFieldNumber;
const int Edge::kNoiseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_graph_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:lifelong_backend.graph.proto.Edge)
}

void Edge::InitAsDefaultInstance() {
  constraint_ = const_cast< ::lifelong_backend::transform::proto::Transform3d*>(
      ::lifelong_backend::transform::proto::Transform3d::internal_default_instance());
}

Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:lifelong_backend.graph.proto.Edge)
}

void Edge::SharedCtor() {
  constraint_ = NULL;
  ::memset(&traj_, 0, reinterpret_cast<char*>(&link_tail_) -
    reinterpret_cast<char*>(&traj_) + sizeof(link_tail_));
  _cached_size_ = 0;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:lifelong_backend.graph.proto.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  if (this != &Edge_default_instance_.get()) {
    delete constraint_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Edge_descriptor_;
}

const Edge& Edge::default_instance() {
  protobuf_InitDefaults_graph_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Edge> Edge_default_instance_;

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:lifelong_backend.graph.proto.Edge)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Edge, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Edge*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(traj_, link_tail_);
  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) delete constraint_;
  constraint_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  noise_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lifelong_backend.graph.proto.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 traj = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &traj_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_link_head;
        break;
      }

      // optional uint32 link_head = 3;
      case 3: {
        if (tag == 24) {
         parse_link_head:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_head_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_link_tail;
        break;
      }

      // optional uint32 link_tail = 4;
      case 4: {
        if (tag == 32) {
         parse_link_tail:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_tail_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_constraint;
        break;
      }

      // optional .lifelong_backend.transform.proto.Transform3d constraint = 5;
      case 5: {
        if (tag == 42) {
         parse_constraint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constraint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_noise;
        break;
      }

      // repeated double noise = 6;
      case 6: {
        if (tag == 50) {
         parse_noise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_noise())));
        } else if (tag == 49) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50, input, this->mutable_noise())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lifelong_backend.graph.proto.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lifelong_backend.graph.proto.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lifelong_backend.graph.proto.Edge)
  // optional uint32 traj = 1;
  if (this->traj() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->traj(), output);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 link_head = 3;
  if (this->link_head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->link_head(), output);
  }

  // optional uint32 link_tail = 4;
  if (this->link_tail() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->link_tail(), output);
  }

  // optional .lifelong_backend.transform.proto.Transform3d constraint = 5;
  if (this->has_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->constraint_, output);
  }

  // repeated double noise = 6;
  if (this->noise_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_noise_cached_byte_size_);
  }
  for (int i = 0; i < this->noise_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->noise(i), output);
  }

  // @@protoc_insertion_point(serialize_end:lifelong_backend.graph.proto.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lifelong_backend.graph.proto.Edge)
  // optional uint32 traj = 1;
  if (this->traj() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->traj(), target);
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 link_head = 3;
  if (this->link_head() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->link_head(), target);
  }

  // optional uint32 link_tail = 4;
  if (this->link_tail() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->link_tail(), target);
  }

  // optional .lifelong_backend.transform.proto.Transform3d constraint = 5;
  if (this->has_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->constraint_, false, target);
  }

  // repeated double noise = 6;
  if (this->noise_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _noise_cached_byte_size_, target);
  }
  for (int i = 0; i < this->noise_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->noise(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:lifelong_backend.graph.proto.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lifelong_backend.graph.proto.Edge)
  size_t total_size = 0;

  // optional uint32 traj = 1;
  if (this->traj() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->traj());
  }

  // optional uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional uint32 link_head = 3;
  if (this->link_head() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_head());
  }

  // optional uint32 link_tail = 4;
  if (this->link_tail() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->link_tail());
  }

  // optional .lifelong_backend.transform.proto.Transform3d constraint = 5;
  if (this->has_constraint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->constraint_);
  }

  // repeated double noise = 6;
  {
    size_t data_size = 0;
    unsigned int count = this->noise_size();
    data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _noise_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lifelong_backend.graph.proto.Edge)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lifelong_backend.graph.proto.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lifelong_backend.graph.proto.Edge)
    UnsafeMergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lifelong_backend.graph.proto.Edge)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Edge::UnsafeMergeFrom(const Edge& from) {
  GOOGLE_DCHECK(&from != this);
  noise_.UnsafeMergeFrom(from.noise_);
  if (from.traj() != 0) {
    set_traj(from.traj());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.link_head() != 0) {
    set_link_head(from.link_head());
  }
  if (from.link_tail() != 0) {
    set_link_tail(from.link_tail());
  }
  if (from.has_constraint()) {
    mutable_constraint()->::lifelong_backend::transform::proto::Transform3d::MergeFrom(from.constraint());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lifelong_backend.graph.proto.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lifelong_backend.graph.proto.Edge)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Edge::IsInitialized() const {

  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  std::swap(traj_, other->traj_);
  std::swap(id_, other->id_);
  std::swap(link_head_, other->link_head_);
  std::swap(link_tail_, other->link_tail_);
  std::swap(constraint_, other->constraint_);
  noise_.UnsafeArenaSwap(&other->noise_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Edge_descriptor_;
  metadata.reflection = Edge_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// optional uint32 traj = 1;
void Edge::clear_traj() {
  traj_ = 0u;
}
::google::protobuf::uint32 Edge::traj() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.traj)
  return traj_;
}
void Edge::set_traj(::google::protobuf::uint32 value) {
  
  traj_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.traj)
}

// optional uint32 id = 2;
void Edge::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 Edge::id() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.id)
  return id_;
}
void Edge::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.id)
}

// optional uint32 link_head = 3;
void Edge::clear_link_head() {
  link_head_ = 0u;
}
::google::protobuf::uint32 Edge::link_head() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.link_head)
  return link_head_;
}
void Edge::set_link_head(::google::protobuf::uint32 value) {
  
  link_head_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.link_head)
}

// optional uint32 link_tail = 4;
void Edge::clear_link_tail() {
  link_tail_ = 0u;
}
::google::protobuf::uint32 Edge::link_tail() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.link_tail)
  return link_tail_;
}
void Edge::set_link_tail(::google::protobuf::uint32 value) {
  
  link_tail_ = value;
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.link_tail)
}

// optional .lifelong_backend.transform.proto.Transform3d constraint = 5;
bool Edge::has_constraint() const {
  return this != internal_default_instance() && constraint_ != NULL;
}
void Edge::clear_constraint() {
  if (GetArenaNoVirtual() == NULL && constraint_ != NULL) delete constraint_;
  constraint_ = NULL;
}
const ::lifelong_backend::transform::proto::Transform3d& Edge::constraint() const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.constraint)
  return constraint_ != NULL ? *constraint_
                         : *::lifelong_backend::transform::proto::Transform3d::internal_default_instance();
}
::lifelong_backend::transform::proto::Transform3d* Edge::mutable_constraint() {
  
  if (constraint_ == NULL) {
    constraint_ = new ::lifelong_backend::transform::proto::Transform3d;
  }
  // @@protoc_insertion_point(field_mutable:lifelong_backend.graph.proto.Edge.constraint)
  return constraint_;
}
::lifelong_backend::transform::proto::Transform3d* Edge::release_constraint() {
  // @@protoc_insertion_point(field_release:lifelong_backend.graph.proto.Edge.constraint)
  
  ::lifelong_backend::transform::proto::Transform3d* temp = constraint_;
  constraint_ = NULL;
  return temp;
}
void Edge::set_allocated_constraint(::lifelong_backend::transform::proto::Transform3d* constraint) {
  delete constraint_;
  constraint_ = constraint;
  if (constraint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:lifelong_backend.graph.proto.Edge.constraint)
}

// repeated double noise = 6;
int Edge::noise_size() const {
  return noise_.size();
}
void Edge::clear_noise() {
  noise_.Clear();
}
double Edge::noise(int index) const {
  // @@protoc_insertion_point(field_get:lifelong_backend.graph.proto.Edge.noise)
  return noise_.Get(index);
}
void Edge::set_noise(int index, double value) {
  noise_.Set(index, value);
  // @@protoc_insertion_point(field_set:lifelong_backend.graph.proto.Edge.noise)
}
void Edge::add_noise(double value) {
  noise_.Add(value);
  // @@protoc_insertion_point(field_add:lifelong_backend.graph.proto.Edge.noise)
}
const ::google::protobuf::RepeatedField< double >&
Edge::noise() const {
  // @@protoc_insertion_point(field_list:lifelong_backend.graph.proto.Edge.noise)
  return noise_;
}
::google::protobuf::RepeatedField< double >*
Edge::mutable_noise() {
  // @@protoc_insertion_point(field_mutable_list:lifelong_backend.graph.proto.Edge.noise)
  return &noise_;
}

inline const Edge* Edge::internal_default_instance() {
  return &Edge_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace graph
}  // namespace lifelong_backend

// @@protoc_insertion_point(global_scope)
